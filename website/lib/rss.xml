<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Obsidian]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>Obsidian</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Wed, 14 Aug 2024 03:17:45 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Wed, 14 Aug 2024 03:17:43 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[Serverless Application Model (SAM)]]></title><description><![CDATA[ 
 ]]></description><link>cloud-computing\aws\serverless-application-model-(sam).html</link><guid isPermaLink="false">Cloud Computing/AWS/Serverless Application Model (SAM).md</guid><pubDate>Tue, 13 Aug 2024 22:26:52 GMT</pubDate></item><item><title><![CDATA[Codecs]]></title><description><![CDATA[ 
 ]]></description><link>hobbies\audio\codecs.html</link><guid isPermaLink="false">Hobbies/Audio/Codecs.md</guid><pubDate>Wed, 14 Aug 2024 02:57:48 GMT</pubDate></item><item><title><![CDATA[Affogato]]></title><description><![CDATA[ 
 ]]></description><link>hobbies\coffee\affogato.html</link><guid isPermaLink="false">Hobbies/Coffee/Affogato.md</guid><pubDate>Wed, 14 Aug 2024 03:00:23 GMT</pubDate></item><item><title><![CDATA[Americano]]></title><description><![CDATA[ 
 ]]></description><link>hobbies\coffee\americano.html</link><guid isPermaLink="false">Hobbies/Coffee/Americano.md</guid><pubDate>Wed, 14 Aug 2024 02:58:24 GMT</pubDate></item><item><title><![CDATA[Caffe Mocha]]></title><description><![CDATA[ 
 ]]></description><link>hobbies\coffee\caffe-mocha.html</link><guid isPermaLink="false">Hobbies/Coffee/Caffe Mocha.md</guid><pubDate>Wed, 14 Aug 2024 02:59:16 GMT</pubDate></item><item><title><![CDATA[Cappuccino]]></title><description><![CDATA[ 
 ]]></description><link>hobbies\coffee\cappuccino.html</link><guid isPermaLink="false">Hobbies/Coffee/Cappuccino.md</guid><pubDate>Wed, 14 Aug 2024 02:58:09 GMT</pubDate></item><item><title><![CDATA[Cold Brew]]></title><description><![CDATA[ 
 ]]></description><link>hobbies\coffee\cold-brew.html</link><guid isPermaLink="false">Hobbies/Coffee/Cold Brew.md</guid><pubDate>Wed, 14 Aug 2024 02:58:43 GMT</pubDate></item><item><title><![CDATA[Cortado]]></title><description><![CDATA[ 
 ]]></description><link>hobbies\coffee\cortado.html</link><guid isPermaLink="false">Hobbies/Coffee/Cortado.md</guid><pubDate>Wed, 14 Aug 2024 02:59:49 GMT</pubDate></item><item><title><![CDATA[Espresso]]></title><description><![CDATA[ 
 ]]></description><link>hobbies\coffee\espresso.html</link><guid isPermaLink="false">Hobbies/Coffee/Espresso.md</guid><pubDate>Wed, 14 Aug 2024 02:58:00 GMT</pubDate></item><item><title><![CDATA[Flat White]]></title><description><![CDATA[ 
 ]]></description><link>hobbies\coffee\flat-white.html</link><guid isPermaLink="false">Hobbies/Coffee/Flat White.md</guid><pubDate>Wed, 14 Aug 2024 02:58:20 GMT</pubDate></item><item><title><![CDATA[Immersion]]></title><description><![CDATA[ 
 ]]></description><link>hobbies\coffee\immersion.html</link><guid isPermaLink="false">Hobbies/Coffee/Immersion.md</guid><pubDate>Wed, 14 Aug 2024 02:58:30 GMT</pubDate></item><item><title><![CDATA[Latte]]></title><description><![CDATA[ 
 ]]></description><link>hobbies\coffee\latte.html</link><guid isPermaLink="false">Hobbies/Coffee/Latte.md</guid><pubDate>Wed, 14 Aug 2024 02:58:14 GMT</pubDate></item><item><title><![CDATA[Macchiato]]></title><description><![CDATA[ 
 ]]></description><link>hobbies\coffee\macchiato.html</link><guid isPermaLink="false">Hobbies/Coffee/Macchiato.md</guid><pubDate>Wed, 14 Aug 2024 02:59:42 GMT</pubDate></item><item><title><![CDATA[Audio Feedback]]></title><description><![CDATA[ 
 ]]></description><link>hobbies\keyboards\audio-feedback.html</link><guid isPermaLink="false">Hobbies/Keyboards/Audio Feedback.md</guid><pubDate>Wed, 14 Aug 2024 03:02:01 GMT</pubDate></item><item><title><![CDATA[Switches]]></title><description><![CDATA[ 
 ]]></description><link>hobbies\keyboards\switches.html</link><guid isPermaLink="false">Hobbies/Keyboards/Switches.md</guid><pubDate>Wed, 14 Aug 2024 03:01:56 GMT</pubDate></item><item><title><![CDATA[Debugging]]></title><description><![CDATA[ 
 <br>Debugging is the act of figuring out the difference between the expected and reality of the current code and then patching it. A program is called stable if it doesn't have a lot of obvious bugs. On the contrary, it is called buggy or unstable if the code has a large number of bugs that affect the functionality and cause incorrect results.<br>There are an infinite amount of ways a bugs can come to existence, but most commonly sprouted from:<br>
<br>Communication issues in the team;
<br>Misunderstanding of the requirements;
<br>Software complexity;
<br>Programming errors;
<br>Use of unfamiliar technologies;
<br>An error in a third-party library.
<br><br>It's almost impossible to avoid all bugs in a large program, but it is possible to reduce their number. These are the five steps that can help you, as a developer, to help you avoid bugs:<br>
<br>Make sure you know what to do.
<br>Decompose a program into smaller units.
<br>Write easy-to-read code.
<br>Run the program with boundary input values.
<br>Write automated tests that will check the program at the build time.
<br>Test automations are possible with debugging frameworks, such as JUnit for Java and PyTest for Python.<br><br>There are several tools and guidelines on how to make an effective test. A simple test to simply compare the values of the reality and the expectation is called an assertion. <br>A good assertion should not include the implementation details in the tests. It should also test only one thing per test. However, following that rule may make testing pretty difficult because we are no longer sure if we can confidently expect the underlying implementation to behave correctly. This is when we can <a data-tooltip-position="top" aria-label="Eliminating dependencies in tests" data-href="#Eliminating dependencies in tests" href="\#Eliminating_dependencies_in_tests" class="internal-link" target="_self" rel="noopener">eliminate dependencies during testing</a> to try to make sure our scopes are targeting the exact function we wish to test.<br><br>Your functions may require dependencies, whether it be a different function that returns a value or an external API call, these functions are irrelevant of the function behaviour we want to test and can be an anomaly during testing. One solution we can do is to try to inject a pretend dependency which acts like the actual dependency, but we can control what values will be returned. There are two main methods of pretending, which are the <a data-href="#Stubs" href="\#Stubs" class="internal-link" target="_self" rel="noopener">Stubs</a> and the <a data-href="#Mocks" href="\#Mocks" class="internal-link" target="_self" rel="noopener">Mocks</a>.<br><br>
A way to provide dummy info instead of making the calling to the actual thing.
<br>Stubs allow you to create a dependency that will return a canned value for calls made during the test. These can be useful when the clients of the stubs expect the same set of responses, e.g. a third party service. Stubs should never fail a unit or integration test where a mock can. They should also not require any sort of framework to run, but usually are supported by mocking frameworks to quickly build a stub.<br><br>
A way to mimic the real function, usually much more simplistic than the actual version.
<br>Mocks are objects that entails expectations about a behaviour. For example, you might be interested if the function you're testing for is correctly calling an external function correctly, you'd be using a mock. If a mock receives an unexpected call, they will probably raise an exception! <br><br>
Anything that can record what's happening inside your function during testing.
<br>There are also a special injection called a spy. Anything that is injected which can log data can be described as a spy, which may be useful if you wanted to log the behaviours on top of mocking or stubbing them.]]></description><link>software-development\code-integrity\debugging.html</link><guid isPermaLink="false">Software Development/Code Integrity/Debugging.md</guid><pubDate>Wed, 14 Aug 2024 03:17:27 GMT</pubDate></item><item><title><![CDATA[Dependency Injection]]></title><description><![CDATA[ 
 <br>
Dependency injection is a programming technique in which an object or function received other objects or function that it requires, as opposed to creating them internally. <a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Dependency_injection" rel="noopener" class="external-link" href="https://en.wikipedia.org/wiki/Dependency_injection" target="_blank">Dependency injection - Wikipedia</a>
<br>Dependency Injection is a <a data-tooltip-position="top" aria-label="Design Pattern" data-href="Design Pattern" href="\Design Pattern" class="internal-link" target="_self" rel="noopener">design pattern</a> to promote the separation of concerns, while ensuring that an object or function that wants to use a given service should not have to know how to construct those services. Instead, the receiving client, the object or function, is provided ith its dependencies by external code.<br>This is a key partner to the <a data-tooltip-position="top" aria-label="Object-Oriented Design" data-href="Object-Oriented Design" href="\Object-Oriented Design" class="internal-link" target="_self" rel="noopener">object-oriented design</a>, the Dependency Inversion Principle.]]></description><link>software-development\code-integrity\dependency-injection.html</link><guid isPermaLink="false">Software Development/Code Integrity/Dependency Injection.md</guid><pubDate>Wed, 14 Aug 2024 03:14:33 GMT</pubDate></item><item><title><![CDATA[Agile Methodology]]></title><description><![CDATA[ 
 <br>The Agile Methodology is a project management approach that involves breaking into smaller phases to emphasize continuous collaboration and incremental improvements.<br><br>Agile, as popular it is, comes in with different forms that are targeted for certain task cases. The two very popular framework are the <a data-href="Scrum" href="\software-development\devops\scrum.html" class="internal-link" target="_self" rel="noopener">Scrum</a> and <a data-href="Kanban" href="\software-development\devops\kanban.html" class="internal-link" target="_self" rel="noopener">Kanban</a> workflow. The main differences between the two can be best-described with a table:<br><br><br>Many teams are attracted to Agile for its flexibility and responsiveness to changes. It's often easier to think about a smaller design goal than a large one, and especially so in bigger projects. It also involves a lot of human-to-human process to discuss about goals and be adjusted to their needs as time flows.<br>
A good agile team will unite under a shared vision, then bring it to life the way they know is best. <a data-tooltip-position="top" aria-label="https://www.atlassian.com/agile" rel="noopener" class="external-link" href="https://www.atlassian.com/agile" target="_blank">What is Agile? | Atlassian</a>
]]></description><link>software-development\devops\agile-methodology.html</link><guid isPermaLink="false">Software Development/DevOps/Agile Methodology.md</guid><pubDate>Tue, 13 Aug 2024 15:08:33 GMT</pubDate></item><item><title><![CDATA[Kanban]]></title><description><![CDATA[ 
 <br>A Kanban, best known by their Kanban board, is an agile project management tool designed to help visualize work, limit work-in-progress, and maximize efficiency <a data-tooltip-position="top" aria-label="https://www.atlassian.com/agile/kanban/boards" rel="noopener" class="external-link" href="https://www.atlassian.com/agile/kanban/boards" target="_blank">What is a Kanban Board? | Atlassian</a>.<br>Where <a data-href="Scrum" href="\software-development\devops\scrum.html" class="internal-link" target="_self" rel="noopener">Scrum</a> is designed to have a defined start and stop dates, Kanban is designed to be continuous.]]></description><link>software-development\devops\kanban.html</link><guid isPermaLink="false">Software Development/DevOps/Kanban.md</guid><pubDate>Tue, 13 Aug 2024 15:52:52 GMT</pubDate></item><item><title><![CDATA[Planning Poker]]></title><description><![CDATA[ 
 ]]></description><link>software-development\devops\planning-poker.html</link><guid isPermaLink="false">Software Development/DevOps/Planning Poker.md</guid><pubDate>Wed, 14 Aug 2024 03:16:39 GMT</pubDate></item><item><title><![CDATA[Scrum]]></title><description><![CDATA[ 
 <br>Scrum is an agile project management framework that helps teams structure and manage their work through a set of values, principles, and practices <a data-tooltip-position="top" aria-label="https://www.atlassian.com/agile/scrum" rel="noopener" class="external-link" href="https://www.atlassian.com/agile/scrum" target="_blank">What is scrum and how to get started (atlassian.com)</a>. <br><br><br>In the Scrum framework, there are several distinct roles that help with the management and upholding of the entire project. The common scrum roles are:<br>
<br>Product Owner (PO)
<br>Scrum Master (SM)\
<br>Development Team
<br>You might find the term "Manager" be familiar to the one of the Scrum Master or Product Owners.<br><br>A sprint can be described as a measurement of a work iteration cadence, usually involving a start-to-finish task the given timespan. A sprint is generally two-weeks long. This short nature encourages small, incremental changes and promote lots of communication between the workforce and the customers. <br><br>Sprint planning is a tool to set up the sprints. A good sprint planning will keep the goals of the customers and the scrum well-positioned and acknowledged.<br>Sprint planning should be constrained no more than two hours each week, or four hours biweekly. This timeboxing makes sure that no time is wasted and everyone comes in prepared, as sprint planning takes up every members' time.<br>Estimation is a huge part of the sprint planning process, because the team needs to define what can or cannot be done in the sprint. A tool that can help with estimation spurs from the concept of <a data-tooltip-position="top" aria-label="User Stories" data-href="User Stories" href="\software-development\devops\user-stories.html" class="internal-link" target="_self" rel="noopener">user stories</a>. Each story can be given a story point, which signifies the amount of work that needs to be put into the task. One common downfall of assigning each story point is overestimation, where an engineer thinks that a task can be done in less time than what it actually did costed. This can be generally avoided with a strategy to allocate story points with the entire team. Generally, this is done with a tool called <a data-tooltip-position="top" aria-label="Planning Poker" data-href="Planning Poker" href="\software-development\devops\planning-poker.html" class="internal-link" target="_self" rel="noopener">planning poker</a>.<br>After each user stories are assigned, each engineers take a moment to calculate their planning points distribution.<br>
At Amazon, there were two different buckets each points could belong to. The first one was capacity, where the effort points are multiplied by a certain offset value for rests and balance, commonly 0.8, and the remainder would be distributed to the buffer or burst, which is reserved for doing other things, such as meetings, mental breaks, and more.
<br><br>A formal scrum meeting is defined as a ceremony. The purpose of each ceremony is to communicate with the team to discuss about the current goals and also dabble on how to improve themselves as a team.<br>The four standard ceremonies are:<br>
<br><a data-href="#Sprint Planning" href="\#Sprint_Planning" class="internal-link" target="_self" rel="noopener">Sprint Planning</a>

<br>Ceremony at the beginning of a sprint designed to set up a particular sprint.
<br>1-2 hours.
<br>Attended by development team, SM, and PO.


<br>Daily Stand-up

<br>Ceremony in the middle of a sprint to inform everyone what's going on across the team. Usually, this involves talking about what each member have done last work day, what they will work on today, and if they are blocked by anything.
<br>15-30 minutes maximum.
<br>Attended by development team, SM, and PO.


<br>Sprint Review\

<br>Ceremony at the end of a sprint, where the scrum team meets to reveal what was accomplished during the sprint. This can be made in form of a demo, or just a simple verbal discussion.
<br>45-90 minutes.
<br>Attended by development team, SM, and PO.


<br>Sprint Retrospective

<br>Ceremony at the end of a sprint, usually with the sprint review, to talk about what was done well and what can be improved more.
<br>45-90 minutes.
<br>Attended by development team, SM, and PO.


]]></description><link>software-development\devops\scrum.html</link><guid isPermaLink="false">Software Development/DevOps/Scrum.md</guid><pubDate>Wed, 14 Aug 2024 03:14:41 GMT</pubDate></item><item><title><![CDATA[Software Development Life Cycle (SDLC)]]></title><description><![CDATA[ 
 <br><br>Software development life cycle, or SDLC, is "the cost-effective and time-efficient process that development teams use to design and build high-quality software" [What is SDLC? - Software Development Lifecycle Explained - AWS (amazon.com)](<a rel="noopener" class="external-link" href="https://aws.amazon.com/what-is/sdlc/#:~:text=The%20software%20development%20lifecycle%20(SDLC,expectations%20during%20production%20and%20beyond.)" target="_blank">https://aws.amazon.com/what-is/sdlc/#:~:text=The%20software%20development%20lifecycle%20(SDLC,expectations%20during%20production%20and%20beyond.)</a>. In short, it's a methodology that steps-out the phases of development to maximize transparency of work, thus enabling efficient estimation of tasks and systematic delivery of software.<br><br>There are six phases of an usual software development cycle:<br>
<br>Plan
<br>Design
<br>Implement
<br>Test
<br>Deploy
<br>Maintain
<br><br>The planning phase includes task related to analysis. For example, cost-benefit analysis, resource analysis, allocation, and so on. Your role, as a software developer, is to collect the requirements from your clients, discuss about those requirements, and finding the best method to implement that idea. Usually, these data will be stored inside of a specification document. <br>The end goal of this phase is to create a common goal between you, your team, and your customers.<br><br>The design phase includes tasks related to identification of solutions. This is done through analyzing the requirements set in the planning phase to create a feasible idea to iterate on. The tasks can include comparing technology choices, identifying development tools, checking if a premade module is available, and so on. <br>The end goal of this phase is to figure out how to best integrate available software, or create new ones if necessary, to reach the goal.<br><br>The implementation phase includes tasks related to engineering and coding the product. This is done through the analysis of the requirements set in the design phase.<br>The end goal of this phase is to iterate upon the design and creating a model to test the functionalities.<br><br>The testing phase includes creating automations to continuously test the implemented features. Usually this is done in parallel with the implementation phase, but sometimes, this can be done before the implementation phase, and the <a data-href="Test-Driven Design" href="\software-development\devops\test-driven-design.html" class="internal-link" target="_self" rel="noopener">Test-Driven Design</a> methodology actually encourages such design.<br>The end goal of this phase is to create a continuous feed of quality analysis to check if the implemented design is deliverable to the customers at a satisfactory level.<br><br>The deploy phase includes the tasks to move the latest build copy to the production environment. <br><br>The maintaining phase includes the tasks to address issues voiced by the customers, refactor the code for the betterment of maintaining, and identifying new ways to improve the software.<br><br>Here are some of the popular methodologies that upholds the nature of SDLC:<br>
<br><a data-href="Waterfall Methodology" href="\software-development\devops\waterfall-methodology.html" class="internal-link" target="_self" rel="noopener">Waterfall Methodology</a>

<br>Arranges all the phases sequentially so that each new phase depends on the outcome of the previous phase.
<br>Can be slow.
<br>Not as flexible.


<br><a data-href="Agile Methodology" href="\software-development\devops\agile-methodology.html" class="internal-link" target="_self" rel="noopener">Agile Methodology</a>

<br>Arranges the phases into several development cycles of little size (sprints), making small but incremental software changes in each cycle.
<br>Engage customers and stakeholders to obtain feedback throughout the project lifecycle.
<br>Very flexible.
<br>Speed depends on the customer feedback, but on average faster than Waterfall for big projects.


]]></description><link>software-development\devops\software-development-life-cycle-(sdlc).html</link><guid isPermaLink="false">Software Development/DevOps/Software Development Life Cycle (SDLC).md</guid><pubDate>Wed, 14 Aug 2024 03:15:50 GMT</pubDate></item><item><title><![CDATA[Test-Driven Design]]></title><description><![CDATA[ 
 ]]></description><link>software-development\devops\test-driven-design.html</link><guid isPermaLink="false">Software Development/DevOps/Test-Driven Design.md</guid><pubDate>Wed, 14 Aug 2024 03:16:26 GMT</pubDate></item><item><title><![CDATA[User Stories]]></title><description><![CDATA[ 
 ]]></description><link>software-development\devops\user-stories.html</link><guid isPermaLink="false">Software Development/DevOps/User Stories.md</guid><pubDate>Wed, 14 Aug 2024 03:16:35 GMT</pubDate></item><item><title><![CDATA[Waterfall Methodology]]></title><description><![CDATA[ 
 <br>Waterfall Methodology is a common project management workflow which has the characteristics of a waterfall, hence the nickname.<br>
Like a waterfall, each process phase cascades downward sequentially through the SDLC stages. <a data-tooltip-position="top" aria-label="https://www.atlassian.com/agile/project-management/waterfall-methodology" rel="noopener" class="external-link" href="https://www.atlassian.com/agile/project-management/waterfall-methodology" target="_blank">Waterfall Methodology for Project Management | Atlassian</a>
<br>Unlike other methods like <a data-href="Agile Methodology" href="\software-development\devops\agile-methodology.html" class="internal-link" target="_self" rel="noopener">Agile Methodology</a>, Waterfall does not allow the engineers to begin the next phase without fully completing the current phase - your team cannot move forward until they resolve the problems. This can lead to big technical debt later in maintenance.]]></description><link>software-development\devops\waterfall-methodology.html</link><guid isPermaLink="false">Software Development/DevOps/Waterfall Methodology.md</guid><pubDate>Tue, 13 Aug 2024 01:19:26 GMT</pubDate></item><item><title><![CDATA[Docker]]></title><description><![CDATA[ 
 <br><br>Docker is an operating system for containers. Similar to how a virtual machine virtualizes server ahrdware, containers virtualize the operating system of a server (<a data-tooltip-position="top" aria-label="https://aws.amazon.com/docker/#:~:text=Docker%20is%20an%20operating%20system,%2C%20start%2C%20or%20stop%20containers." rel="noopener" class="external-link" href="https://aws.amazon.com/docker/#:~:text=Docker%20is%20an%20operating%20system,%2C%20start%2C%20or%20stop%20containers." target="_blank">What is Docker? | AWS (amazon.com)</a>).<br><br>A container is the standard unit of software that packages up code and all of its dependencies so the application runs quickly and reliably from one computing environment to another (<a data-tooltip-position="top" aria-label="https://www.docker.com/resources/what-container/" rel="noopener" class="external-link" href="https://www.docker.com/resources/what-container/" target="_blank">What is a Container? | Docker</a>). It's designed to be lightweight and standalone, such that it can be easily transported into another environment safely. This makes containers almost like an engine for a portable program.<br>Because the containers virtualize the operating system, there are some key differences between itself and a virtual machine:<br>
<br>Containers

<br>Abstraction of the application layer that packages code and dependencies together.
<br>High iteration speed because it only contains high-level software.
<br>Has a robust ecosystem sharing containers.
<br>Potential security risk of infecting the shared host of the containers.


<br>Virtual Machine

<br>Provides complete emulation of low-level hardware devices like CPU.
<br>Provides full isolation security.
<br>Much more dynamic and can be interactively developed.
<br>More time consuming to build and regenerate.
<br>VMs take up a lot of storage space.


<br>The right answer for your tool will depend on the use case. If you are simply trying to launch a simple ecosystem of software-only projects, then containers might be the right option for you. If you have a specific hardware requirement for your projects, then likely you'll need a virtual machine. Of course, you could choose to employ both, but it is likely that you won't need to.<br><br>Docker is almost synonymous with the standard of container. Because of its popularity, we can decide to use the containers in many different application. The best way to get started with Docker is by installing Docker Desktop for casual purposes. <br>Some examples are:<br>
<br>Launching MySQL
<br>Creating a running instance of <a data-tooltip-position="top" aria-label="Serverless Application Model (SAM)" data-href="Serverless Application Model (SAM)" href="\cloud-computing\aws\serverless-application-model-(sam).html" class="internal-link" target="_self" rel="noopener">Serverless Application Model for AWS</a>.
]]></description><link>software-development\tools\docker.html</link><guid isPermaLink="false">Software Development/Tools/Docker.md</guid><pubDate>Tue, 13 Aug 2024 22:32:24 GMT</pubDate></item><item><title><![CDATA[Git]]></title><description><![CDATA[ 
 <br>This entire note will be very inspired by <a data-tooltip-position="top" aria-label="https://www.atlassian.com/git/tutorials/what-is-version-control" rel="noopener" class="external-link" href="https://www.atlassian.com/git/tutorials/what-is-version-control" target="_blank">Atlassian's Git Tutorial</a> and also <a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=9eBieLWZQOM" rel="noopener" class="external-link" href="https://www.youtube.com/watch?v=9eBieLWZQOM" target="_blank">Practical Guide to Git from JetBrains Academy (youtube.com)</a>. <br>Git is a version control system, which is the tool of tracking and managing changes to the software code. ]]></description><link>software-development\version-control\git.html</link><guid isPermaLink="false">Software Development/Version Control/Git.md</guid><pubDate>Wed, 14 Aug 2024 01:38:05 GMT</pubDate></item><item><title><![CDATA[Bibliotheque]]></title><description><![CDATA[ 
 <br><br>Website has been created via GitHub pages - <a data-tooltip-position="top" aria-label="https://ksdsk.github.io/Bibliotheque/" rel="noopener" class="external-link" href="https://ksdsk.github.io/Bibliotheque/" target="_blank">visit the website!</a><br><br>I've graduated school, and I miss learning.<br>Lately I've been feeling like there's too many knowledge that I don't know about that can't be made with by creating personal projects. For example, learning more about Software Development Life Cycle (SDLC), refactoring tricks, or for a more embedded technology like learning about software layers.<br>Crazy I would tell myself when I was 14 years old, but I really do miss learning and training myself to contain more tech knowledge in general - I want to continue learning more to improve myself. Some people look up on me, but really, I'm just a person who only spent four years in school, dabbling in some fun and motivated projects here and there. I can't let them down. I can't let me down either. I've always wanted to be the person to be reached out for when they need some sort of help. The "first-aid kit" type of senior.<br>Anyways, I'm making this repository as sort of a motivation, but also a log of what I've learned in my career from hereon - a tracker of each and every one of my learnings. This repository is designed to contain pages of my <a data-tooltip-position="top" aria-label="https://obsidian.md/" rel="noopener" class="external-link" href="https://obsidian.md/" target="_blank">Obsidian</a> notes to contain all the cool things I came across after graduation. It'd be awesome if random strangers come by and look at my notes and go "wow this is pretty cool", just like how I read through random people's Medium pages for information and go "wow this is pretty cool".<br>I'm going to start from the very basics, then end up noting about the things I want to be better at, which is mostly going to relate to the kind of work I'm doing. Eventually, this repository is going to become something like a library, where it'll be a collection of notes for different kinds of subjects. The term library has a different meaning in software engineering though, so I'll just call it library in a different language. The Korean word for library doesn't sound cool (do-seo-kwan)... I think I'm going to call it Bibliothèque, the French word for Library.<br>And just for fun, I'll also add in some hobbies outside of the technological world as well. Mostly to keep my sanity, but also for lengthening my interest and mastery in them.]]></description><link>index.html</link><guid isPermaLink="false">index.md</guid><pubDate>Wed, 14 Aug 2024 03:05:52 GMT</pubDate></item></channel></rss>