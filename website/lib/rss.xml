<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Obsidian]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>Obsidian</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Tue, 13 Aug 2024 05:08:53 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Tue, 13 Aug 2024 05:08:53 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[Framework]]></title><description><![CDATA[ 
 <br>The Agile Methodology is a project management approach that involves breaking into smaller phases to emphasize continuous collaboration and incremental improvements.<br><br>Agile, as popular it is, comes in with different forms that are targeted for certain task cases. The two very popular framework are the <a data-href="Scrum" href="\Software Development\Scrum.html" class="internal-link" target="_self" rel="noopener">Scrum</a> and <a data-href="Kanban" href="\Software Development\Kanban.html" class="internal-link" target="_self" rel="noopener">Kanban</a> workflow. The main differences between the two can be best-described with a table:<br><br><br>Many teams are attracted to Agile for its flexibility and responsiveness to changes. It's often easier to think about a smaller design goal than a large one, and especially so in bigger projects. It also involves a lot of human-to-human process to discuss about goals and be adjusted to their needs as time flows.<br>
A good agile team will unite under a shared vision, then bring it to life the way they know is best. <a data-tooltip-position="top" aria-label="https://www.atlassian.com/agile" rel="noopener" class="external-link" href="https://www.atlassian.com/agile" target="_blank">What is Agile? | Atlassian</a>
]]></description><link>Software Development\Agile Methodology.html</link><guid isPermaLink="false">Software Development/Agile Methodology.md</guid><pubDate>Tue, 13 Aug 2024 01:42:44 GMT</pubDate></item><item><title><![CDATA[Kanban]]></title><description><![CDATA[ 
 ]]></description><link>Software Development\Kanban.html</link><guid isPermaLink="false">Software Development/Kanban.md</guid><pubDate>Tue, 13 Aug 2024 01:48:50 GMT</pubDate></item><item><title><![CDATA[Project Management]]></title><description><![CDATA[ 
 <br>Scrum is an agile project management framework that helps teams structure and manage their work through a set of values, principles, and practices <a data-tooltip-position="top" aria-label="https://www.atlassian.com/agile/scrum" rel="noopener" class="external-link" href="https://www.atlassian.com/agile/scrum" target="_blank">What is scrum and how to get started (atlassian.com)</a>. <br><br><br>In the Scrum framework, there are several distinct roles that help with the management and upholding of the entire project. The common scrum roles are:<br>
<br>Product Owner (PO)
<br>Scrum Master (SM)\
<br>Development Team
<br>You might find the term "Manager" be familiar to the one of the Scrum Master or Product Owners.<br><br>A sprint can be described as a measurement of a work iteration cadence, usually involving a start-to-finish task the given timespan. A sprint is generally two-weeks long. This short nature encourages small, incremental changes and promote lots of communication between the workforce and the customers. <br><br>Sprint planning is a tool to set up the sprints. A good sprint planning will keep the goals of the customers and the scrum well-positioned and acknowledged.<br>Sprint planning should be constrained no more than two hours each week, or four hours biweekly. This timeboxing makes sure that no time is wasted and everyone comes in prepared, as sprint planning takes up every members' time.<br>Estimation is a huge part of the sprint planning process, because the team needs to define what can or cannot be done in the sprint. A tool that can help with estimation spurs from the concept of <a data-tooltip-position="top" aria-label="User Stories" data-href="User Stories" href="\User Stories" class="internal-link" target="_self" rel="noopener">user stories</a>. Each story can be given a story point, which signifies the amount of work that needs to be put into the task. One common downfall of assigning each story point is overestimation, where an engineer thinks that a task can be done in less time than what it actually did costed. This can be generally avoided with a strategy to allocate story points with the entire team. Generally, this is done with a tool called <a data-tooltip-position="top" aria-label="Planning Poker" data-href="Planning Poker" href="\Planning Poker" class="internal-link" target="_self" rel="noopener">planning poker</a>.<br>After each user stories are assigned, each engineers take a moment to calculate their planning points distribution.<br>
At Amazon, there were two different buckets each points could belong to. The first one was capacity, where the effort points are multiplied by a certain offset value for rests and balance, commonly 0.8, and the remainder would be distributed to the buffer or burst, which is reserved for doing other things, such as meetings, mental breaks, and more.
<br><br>A formal scrum meeting is defined as a ceremony. This ceremony]]></description><link>Software Development\Scrum.html</link><guid isPermaLink="false">Software Development/Scrum.md</guid><pubDate>Tue, 13 Aug 2024 04:52:21 GMT</pubDate></item><item><title><![CDATA[What is it?]]></title><description><![CDATA[ 
 <br><br>Software development life cycle, or SDLC, is "the cost-effective and time-efficient process that development teams use to design and build high-quality software" [Source](<a data-tooltip-position="top" aria-label="https://aws.amazon.com/what-is/sdlc/#:~:text=The%20software%20development%20lifecycle%20(SDLC,expectations%20during%20production%20and%20beyond.)" rel="noopener" class="external-link" href="https://aws.amazon.com/what-is/sdlc/#:~:text=The%20software%20development%20lifecycle%20(SDLC,expectations%20during%20production%20and%20beyond.)" target="_blank">What is SDLC? - Software Development Lifecycle Explained - AWS (amazon.com)</a>. In short, it's a methodology that steps-out the phases of development to maximize transparency of work, thus enabling efficient estimation of tasks and systematic delivery of software.<br><br>There are six phases of an usual software development cycle:<br>
<br>Plan
<br>Design
<br>Implement
<br>Test
<br>Deploy
<br>Maintain
<br><br>The planning phase includes task related to analysis. For example, cost-benefit analysis, resource analysis, allocation, and so on. Your role, as a software developer, is to collect the requirements from your clients, discuss about those requirements, and finding the best method to implement that idea. Usually, these data will be stored inside of a specification document. <br>The end goal of this phase is to create a common goal between you, your team, and your customers.<br><br>The design phase includes tasks related to identification of solutions. This is done through analyzing the requirements set in the planning phase to create a feasible idea to iterate on. The tasks can include comparing technology choices, identifying development tools, checking if a premade module is available, and so on. <br>The end goal of this phase is to figure out how to best integrate available software, or create new ones if necessary, to reach the goal.<br><br>The implementation phase includes tasks related to engineering and coding the product. This is done through the analysis of the requirements set in the design phase.<br>The end goal of this phase is to iterate upon the design and creating a model to test the functionalities.<br><br>The testing phase includes creating automations to continuously test the implemented features. Usually this is done in parallel with the implementation phase, but sometimes, this can be done before the implementation phase, and the <a data-href="Test-Driven Design" href="\Test-Driven Design" class="internal-link" target="_self" rel="noopener">Test-Driven Design</a> methodology actually encourages such design.<br>The end goal of this phase is to create a continuous feed of quality analysis to check if the implemented design is deliverable to the customers at a satisfactory level.<br><br>The deploy phase includes the tasks to move the latest build copy to the production environment. <br><br>The maintaining phase includes the tasks to address issues voiced by the customers, refactor the code for the betterment of maintaining, and identifying new ways to improve the software.<br><br>Here are some of the popular methodologies that upholds the nature of SDLC:<br>
<br><a data-href="Waterfall Methodology" href="\Software Development\Waterfall Methodology.html" class="internal-link" target="_self" rel="noopener">Waterfall Methodology</a>

<br>Arranges all the phases sequentially so that each new phase depends on the outcome of the previous phase.
<br>Can be slow.
<br>Not as flexible.


<br><a data-href="Agile Methodology" href="\Software Development\Agile Methodology.html" class="internal-link" target="_self" rel="noopener">Agile Methodology</a>

<br>Arranges the phases into several development cycles of little size (sprints), making small but incremental software changes in each cycle.
<br>Engage customers and stakeholders to obtain feedback throughout the project lifecycle.
<br>Very flexible.
<br>Speed depends on the customer feedback, but on average faster than Waterfall for big projects.


]]></description><link>Software Development\Software Development Life Cycle (SDLC).html</link><guid isPermaLink="false">Software Development/Software Development Life Cycle (SDLC).md</guid><pubDate>Tue, 13 Aug 2024 01:49:39 GMT</pubDate></item><item><title><![CDATA[Waterfall Methodology]]></title><description><![CDATA[ 
 <br>Waterfall Methodology is a common project management workflow which has the characteristics of a waterfall, hence the nickname.<br>
Like a waterfall, each process phase cascades downward sequentially through the SDLC stages. <a data-tooltip-position="top" aria-label="https://www.atlassian.com/agile/project-management/waterfall-methodology" rel="noopener" class="external-link" href="https://www.atlassian.com/agile/project-management/waterfall-methodology" target="_blank">Waterfall Methodology for Project Management | Atlassian</a>
<br>Unlike other methods like <a data-href="Agile Methodology" href="\Software Development\Agile Methodology.html" class="internal-link" target="_self" rel="noopener">Agile Methodology</a>, Waterfall does not allow the engineers to begin the next phase without fully completing the current phase - your team cannot move forward until they resolve the problems. This can lead to big technical debt later in maintenance.]]></description><link>Software Development\Waterfall Methodology.html</link><guid isPermaLink="false">Software Development/Waterfall Methodology.md</guid><pubDate>Tue, 13 Aug 2024 01:19:26 GMT</pubDate></item></channel></rss>