<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Obsidian]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>Obsidian</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Fri, 16 Aug 2024 01:57:25 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Fri, 16 Aug 2024 01:57:22 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[Affogato]]></title><description><![CDATA[ 
 <br>An affogato is an Italian dessert comprising a scoop of plain vanilla gelato or ice cream, topped with hot <a data-tooltip-position="top" aria-label="Espresso" data-href="Espresso" href="\hobbies\coffee\espresso.html" class="internal-link" target="_self" rel="noopener">espresso</a>.<br><br>Unknown, but gained popularity in Italy in the 1950s.<br><br>Creating an affogato is simple:<br>
<br>Scoop vanilla gelato / ice cream into a cup;
<br>Brew espresso;
<br>Pour the espresso on top of the sweet.
<br>You could additionally decorate / flavour the affogato with syrup or cocoa powder.]]></description><link>hobbies\coffee\affogato.html</link><guid isPermaLink="false">Hobbies/Coffee/Affogato.md</guid><pubDate>Fri, 16 Aug 2024 01:39:44 GMT</pubDate></item><item><title><![CDATA[Americano]]></title><description><![CDATA[ 
 <br>Americano is a drink consisting of <a data-href="espresso" href="\hobbies\coffee\espresso.html" class="internal-link" target="_self" rel="noopener">espresso</a> and hot water.<br><br>Caffe Americano, or simply Americano, means "American Coffee" in Italian, Spanish, and Portuguese. The coffee was thought to be originated by the American G.I.s where they decided to dilute espresso with hot water to approximate to their own taste.<br><br>Creating an Americano is simple:<br>
<br>Prepare water about 4 times the amount of espresso at 90 degrees;
<br>Brew espresso;
<br>Pour the hot water over the espresso.
<br><br>A long black is essentially the same as an americano, but instead of pouring water over the espresso, you will pour the espresso over the hot water. This keeps the espresso's crema intact.]]></description><link>hobbies\coffee\americano.html</link><guid isPermaLink="false">Hobbies/Coffee/Americano.md</guid><pubDate>Thu, 15 Aug 2024 03:27:16 GMT</pubDate></item><item><title><![CDATA[Caffè Latte]]></title><description><![CDATA[ 
 <br>Caffè latte is a simple drink consisting of <a data-tooltip-position="top" aria-label="Espresso" data-href="Espresso" href="\hobbies\coffee\espresso.html" class="internal-link" target="_self" rel="noopener">espresso</a> and steamed milk.<br><br>Caffe latte is a coffee drink of Italian origin made with espresso and steamed milk. It is traditionally served in a glass. There are a lot of variants of this drink, such as the <a data-href="Caffè Mocha" href="\hobbies\coffee\caffè-mocha.html" class="internal-link" target="_self" rel="noopener">Caffè Mocha</a>, which introduces a chocolate flavour on top, or matcha, a green tea drink. <br>The word Caffè Latte is taken from the Italian phrase Caffè e Latte, which means Coffee and Milk. <br><br>Creating a caffè latte is simple:<br>
<br>Brew espresso;
<br>Steam milk (usually for about 4 seconds of stretching) in a milk jug;
<br>Stop steaming when it reaches about 65 degrees (when you feel uncomfortable holding the milk jug).
<br><br>Iced latte is a chilled form of a caffè latte. It is one of the most popular form of iced coffee beverage.<br>The recipe is not much different from a latte:<br>
<br>Brew espresso;
<br>Mix in two teaspoons of sugar or honey (sweetness differs!);
<br>Mix in an ice fragment to cool the espresso;
<br>Steam milk (stretch for about 4 seconds);
<br>Take out a chilled glass with ice filled to the brim;
<br>Pour the espresso into the chilled glass and mix until the temperature is even;
<br>Pour the steamed milk into the chilled glass;
<br>Mix until fully blended.
]]></description><link>hobbies\coffee\caffè-latte.html</link><guid isPermaLink="false">Hobbies/Coffee/Caffè Latte.md</guid><pubDate>Thu, 15 Aug 2024 03:20:35 GMT</pubDate></item><item><title><![CDATA[Cappuccino]]></title><description><![CDATA[ 
 <br>Cappuccino is an <a data-tooltip-position="top" aria-label="Espresso" data-href="Espresso" href="\hobbies\coffee\espresso.html" class="internal-link" target="_self" rel="noopener">espresso</a>-based coffee drink that is traditionally prepared with steaming milk including a layer of milk foam. It is typically smaller in volume than a <a data-href="Caffè Latte" href="\hobbies\coffee\caffè-latte.html" class="internal-link" target="_self" rel="noopener">Caffè Latte</a>, and topped with a thick layer of foam rather than being made with microfoam.<br><br>The name comes from the Capuchin Friars, referring to the color of their habits, which in this context, refers to the colour of the beverage when milk is added in small portion to dark, brewed coffee. <br>The Viennese bestowed the name Kapuziner, which was introduced to northern Italy during the period of Austrian domination, which it when it took the Italian name of Cappuccino.<br><br>Creating a cappuccino is similar to a latte:<br>
<br>Brew espresso;
<br>Steam milk, which should be less than the amount you would put for a latte (usually for about 8-10 seconds to create a layer of foam);
<br>Stop steaming when it reaches about 65 degrees (when you feel uncomfortable holding the milk jug).
]]></description><link>hobbies\coffee\cappuccino.html</link><guid isPermaLink="false">Hobbies/Coffee/Cappuccino.md</guid><pubDate>Fri, 16 Aug 2024 01:36:35 GMT</pubDate></item><item><title><![CDATA[Cold Brew]]></title><description><![CDATA[ 
 <br>Cold brew is a cold drink where the coffee grounds were steeped at cool temperatures for an extended period (12 - 24 hours).<br><br>Cold brew coffee originated in Japan, where it has been a traditional method of coffee brewing for centuries. Slow-drip cold brew, also known as Kyoto-style, or as Dutch coffee in East Asia refers to a process in which water is dripped through coffee grounds at room temperature over of many hours. The grounds can be fine as an <a data-tooltip-position="top" aria-label="Espresso" data-href="Espresso" href="\hobbies\coffee\espresso.html" class="internal-link" target="_self" rel="noopener">espresso</a>, or coarse.<br>Because the ground coffee beans in cold-brewed coffee never come into contact with heated water, the process of leaching the flavour from the beans produces a chemical profile different from conventional brewing methods. <br><br>Just make iced coffee instead.]]></description><link>hobbies\coffee\cold-brew.html</link><guid isPermaLink="false">Hobbies/Coffee/Cold Brew.md</guid><pubDate>Fri, 16 Aug 2024 01:56:40 GMT</pubDate></item><item><title><![CDATA[Cortado]]></title><description><![CDATA[ 
 <br>Caffè latte is a Spanish drink consisting of equal parts of <a data-tooltip-position="top" aria-label="Espresso" data-href="Espresso" href="\hobbies\coffee\espresso.html" class="internal-link" target="_self" rel="noopener">espresso</a> and steamed milk.<br><br>The term cortado is itself broadly associated with various coffee or espresso beverages having been "cut" with milk. It is very similar or the same as the Italian <a data-href="Macchiato" href="\hobbies\coffee\macchiato.html" class="internal-link" target="_self" rel="noopener">Macchiato</a> or the <a data-href="Flat White" href="\hobbies\coffee\flat-white.html" class="internal-link" target="_self" rel="noopener">Flat White</a>, just uses an equal-parts of coffee and milk.<br><br>Creating a caffè latte is simple:<br>
<br>Brew espresso;
<br>Steam milk (usually for about 4 seconds of stretching) in a milk jug;
<br>Stop steaming when it reaches about 65 degrees (when you feel uncomfortable holding the milk jug).
]]></description><link>hobbies\coffee\cortado.html</link><guid isPermaLink="false">Hobbies/Coffee/Cortado.md</guid><pubDate>Fri, 16 Aug 2024 01:46:29 GMT</pubDate></item><item><title><![CDATA[Espresso]]></title><description><![CDATA[ 
 <br>
An espresso is a concentrated form of coffee produced by forcing hot water under high pressure through finely-ground coffee beans. <a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Espresso" rel="noopener" class="external-link" href="https://en.wikipedia.org/wiki/Espresso" target="_blank">Espresso - Wikipedia</a>
<br><br>You can extract espresso, or more in slang, pull a shot of espresso with an espresso machine specifically designed to create pressure through the tamped beans. As a barista, you can control the amount of pressure, size, and the duration of the pulling to control the taste profile of the espresso.<br>The single size of an espresso is usually kept at 9-10 grams of coffee grounds, whereas a double, or a doppio will include about 18-20 grams of coffee grounds.<br>The carbon dioxide created from the pressure leaves a golden foam on top of the coffee. This foam is termed the crema of the coffee.<br><br>A normale is the common shot of espresso which aims to extract about the double the weight of the coffee grounds.<br>It has a ratio of 1:2 (1 part coffee beans to 2 part water).<br><br>A ristretto is a common short shot of espresso which is brewed with the same amount of coffee grounds, but extracted using only half as much water. The taste of this espresso tends to be more concentrated, unbalanced, and obviously more little than a typical shot of espresso.<br>It has a ratio of 1:1.<br><br>A lungo is a common long shot of espresso, opposite of <a data-href="#Ristretto" href="\#Ristretto" class="internal-link" target="_self" rel="noopener">Ristretto</a>, the extraction requires double the amount of water.<br>It has a ratio of 1:4.]]></description><link>hobbies\coffee\espresso.html</link><guid isPermaLink="false">Hobbies/Coffee/Espresso.md</guid><pubDate>Thu, 15 Aug 2024 03:28:36 GMT</pubDate></item><item><title><![CDATA[Flat White]]></title><description><![CDATA[ 
 <br>Flat white is a simple drink consisting of <a data-tooltip-position="top" aria-label="Espresso" data-href="Espresso" href="\hobbies\coffee\espresso.html" class="internal-link" target="_self" rel="noopener">espresso</a> and steamed milk.<br><br>The origins of the flat white are contentious, with New Zealand, Australia, and England debating its invention. However, it has gained popularity in the early 1980s in Australia.<br>People often associate the drink to the "in-between" of a <a data-href="Caffè Latte" href="\hobbies\coffee\caffè-latte.html" class="internal-link" target="_self" rel="noopener">Caffè Latte</a> and a <a data-href="Cappuccino" href="\hobbies\coffee\cappuccino.html" class="internal-link" target="_self" rel="noopener">Cappuccino</a>, because:<br>
<br>It is served with microfoams like the latte, but
<br>It requires less milk, like the cappuccino.
<br>A good rule-of-thumb is a 1:2 ratio of coffee and milk.<br><br>Creating a flat white is simple:<br>
<br>Brew espresso;
<br>Steam milk (usually for about 2-4 seconds of stretching) in a milk jug;
<br>Stop steaming when it reaches about 65 degrees (when you feel uncomfortable holding the milk jug).
]]></description><link>hobbies\coffee\flat-white.html</link><guid isPermaLink="false">Hobbies/Coffee/Flat White.md</guid><pubDate>Fri, 16 Aug 2024 01:44:01 GMT</pubDate></item><item><title><![CDATA[Immersion]]></title><description><![CDATA[ 
 <br>Coffee can be made in many different methods. One popular method is the act of pulling an <a data-tooltip-position="top" aria-label="Espresso" data-href="Espresso" href="\hobbies\coffee\espresso.html" class="internal-link" target="_self" rel="noopener">espresso</a>. The other is a much more classic method called an immersion.]]></description><link>hobbies\coffee\immersion.html</link><guid isPermaLink="false">Hobbies/Coffee/Immersion.md</guid><pubDate>Thu, 15 Aug 2024 03:44:24 GMT</pubDate></item><item><title><![CDATA[Macchiato]]></title><description><![CDATA[ 
 <br>Macchiato is an Italian drink consisting of equal parts or more of <a data-tooltip-position="top" aria-label="Espresso" data-href="Espresso" href="\hobbies\coffee\espresso.html" class="internal-link" target="_self" rel="noopener">espresso</a> and steamed milk.<br><br>Macchiato means "to be stained" in Italian, which stems from baristas showing waiters the difference between an espresso and an espresso with a tiny bit of milk in it. Lmao.<br><br>Creating a macchiato is simple:<br>
<br>Brew espresso;
<br>Steam milk (usually for about 4 seconds of stretching) in a milk jug;
<br>Stop steaming when it reaches about 65 degrees (when you feel uncomfortable holding the milk jug).
]]></description><link>hobbies\coffee\macchiato.html</link><guid isPermaLink="false">Hobbies/Coffee/Macchiato.md</guid><pubDate>Fri, 16 Aug 2024 01:52:52 GMT</pubDate></item><item><title><![CDATA[Network Protocols]]></title><description><![CDATA[ 
 <br>
A network protocol is an established set of rules that determine how data is transmitted between different devices in the same network. <a data-tooltip-position="top" aria-label="https://www.comptia.org/content/guides/what-is-a-network-protocol" rel="noopener" class="external-link" href="https://www.comptia.org/content/guides/what-is-a-network-protocol" target="_blank">Network Protocol Definition | Computer Protocol | Computer Networks | CompTIA</a>
<br><br>Network protocols take large-scale processes and break them down into small, specific tasks or functions. This occurs at every level of the network, and each function must cooperate at each level to complete the larger task at hand. The term protocol suite refers to a set of smaller network protocols working in conjunction with each other.<br>Network protocols are typically created according to industry standard by various networking or information technology organizations. The following groups have defined and published different network protocols:<br>
<br><a data-href="The Institute of Electrical and Electronics Engineers (IEEE)" href="\The Institute of Electrical and Electronics Engineers (IEEE)" class="internal-link" target="_self" rel="noopener">The Institute of Electrical and Electronics Engineers (IEEE)</a>
<br><a data-href="The Internet Engineering Task Force (IETF)" href="\The Internet Engineering Task Force (IETF)" class="internal-link" target="_self" rel="noopener">The Internet Engineering Task Force (IETF)</a>
<br><a data-href="The International Organization for Standardization (ISO)" href="\The International Organization for Standardization (ISO)" class="internal-link" target="_self" rel="noopener">The International Organization for Standardization (ISO)</a>
<br><a data-href="The International Telecommunications Union (ITU)" href="\The International Telecommunications Union (ITU)" class="internal-link" target="_self" rel="noopener">The International Telecommunications Union (ITU)</a>
<br><a data-href="The World Wide Web Consortium (W3C)" href="\The World Wide Web Consortium (W3C)" class="internal-link" target="_self" rel="noopener">The World Wide Web Consortium (W3C)</a>
]]></description><link>networks\network-protocols.html</link><guid isPermaLink="false">Networks/Network Protocols.md</guid><pubDate>Thu, 15 Aug 2024 21:09:14 GMT</pubDate></item><item><title><![CDATA[Planning Poker]]></title><description><![CDATA[ 
 <br>
Also called Scrum Poker, is a consensus-based, gamified technique for estimating, mostly used for timeboxing in <a data-tooltip-position="top" aria-label="Agile Methodology" data-href="Agile Methodology" href="\software-development\devops\agile-methodology.html" class="internal-link" target="_self" rel="noopener">agile principles</a>. <a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Planning_poker" rel="noopener" class="external-link" href="https://en.wikipedia.org/wiki/Planning_poker" target="_blank">Planning poker - Wikipedia</a>
<br>The reason to use planning poker is to avoid the influence of the other participants. If a number is spoken, it can sound like a suggestion and influence the other participants' sizing. Planning poker should force people to think independently and propose their numbers simultaneously. <br>Planning poker generally takes during the <a data-tooltip-position="top" aria-label="Scrum > Sprint Planning" data-href="Scrum#Sprint Planning" href="\software-development\devops\scrum.html#Sprint_Planning" class="internal-link" target="_self" rel="noopener">sprint planning</a> stage of Scrum.<br><br>Planning poker is based on a list of features to be delivered, several copies of a deck of cards, and optionally, an egg timer that can be used to limit time spent in discussion of each item. <br>The cards given to each player usually follows the Fibonacci Sequence. The reason for using the Fibonacci sequence instead of simply doubling each subsequent value is because estimating a task as exactly double the effort of another task is misleadingly precise. Some popular variations of the planning poker deck deviate slightly from the Fibonacci sequence. For example: 0, , 1, 2, 3, 5, 8, 13, 20, 40, 100, and optionally, a ? (unsure).<br>In many cases, these equipment are digitized into applications to speed up the process.<br><br>At the sprint planning meeting, each estimator is given one deck of the cards. All decks have identical set of cards in them.<br>The meeting proceeds as follows:<br>
<br>A Moderator, who will not play, chairs the meeting.
<br>The <a data-tooltip-position="top" aria-label="Scrum > Roles" data-href="Scrum#Roles" href="\software-development\devops\scrum.html#Roles" class="internal-link" target="_self" rel="noopener">Product Owner</a> provides a short overview of one <a data-tooltip-position="top" aria-label="User Stories" data-href="User Stories" href="\software-development\devops\user-stories.html" class="internal-link" target="_self" rel="noopener">user story</a> to be estimated. The team is given an opportunity to ask questions and discuss to clarify assumptions and risks. A summary of the discussion can be recorded by the Moderator.
<br>Each individual lays a card face down representing their estimate for the story. Units used can vary - they can be days or story point. During the discussion, estimations must not be mentioned at all in relation to feature size to avoid <a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Anchoring_(cognitive_bias)" rel="noopener" class="external-link" href="https://en.wikipedia.org/wiki/Anchoring_(cognitive_bias)" target="_blank">anchoring</a>.
<br>Everyone calls their cards simultaneously by turning them over.
<br>People with high estimates and low estimates justifies for their estimate and then the discussion continues.
<br>Repeat the estimation process until a consensus is reached.
<br>To ensure that the discussion is structured, the Moderator or the Product Owner may at any point turn over the timer and when it runs out, all discussion must cease and another round of poker is played.
]]></description><link>software-development\devops\planning-poker.html</link><guid isPermaLink="false">Software Development/DevOps/Planning Poker.md</guid><pubDate>Thu, 15 Aug 2024 19:59:57 GMT</pubDate></item><item><title><![CDATA[Feature Branch Workflow]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\comparing-workflows\feature-branch-workflow.html</link><guid isPermaLink="false">Software Development/Version Control/Comparing Workflows/Feature Branch Workflow.md</guid><pubDate>Thu, 15 Aug 2024 19:36:52 GMT</pubDate></item><item><title><![CDATA[Forking Workflow]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\comparing-workflows\forking-workflow.html</link><guid isPermaLink="false">Software Development/Version Control/Comparing Workflows/Forking Workflow.md</guid><pubDate>Thu, 15 Aug 2024 19:37:08 GMT</pubDate></item><item><title><![CDATA[Gitflow Workflow]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\comparing-workflows\gitflow-workflow.html</link><guid isPermaLink="false">Software Development/Version Control/Comparing Workflows/Gitflow Workflow.md</guid><pubDate>Thu, 15 Aug 2024 19:37:02 GMT</pubDate></item><item><title><![CDATA[git blame]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\inspecting-a-repository\git-blame.html</link><guid isPermaLink="false">Software Development/Version Control/Inspecting a Repository/git blame.md</guid><pubDate>Thu, 15 Aug 2024 19:34:42 GMT</pubDate></item><item><title><![CDATA[git log]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\inspecting-a-repository\git-log.html</link><guid isPermaLink="false">Software Development/Version Control/Inspecting a Repository/git log.md</guid><pubDate>Thu, 15 Aug 2024 19:27:29 GMT</pubDate></item><item><title><![CDATA[git tag]]></title><description><![CDATA[ 
 <br>Tagging in <a data-href="Git" href="\software-development\version-control\git.html" class="internal-link" target="_self" rel="noopener">Git</a> is generally used to capture a point in history that is used for a marked version release (i.e. v1.0.1). Treat tags like a <a data-href="git branch" href="\software-development\version-control\using-branches\git-branch.html" class="internal-link" target="_self" rel="noopener">git branch</a> that doesn't change. Unlike branches, tags, after being created, have no further history of commits. <br><br>To create a new tag, execute the following:<br>git tag &lt;tag-name&gt;
Copy<br>... where the &lt;tag-name&gt; is usually a semantic identifier to the state of the repo at the time the tag is being created. A common pattern is to use version numbers like v1.2. <br>You can also create an annotated tag, which stores a lot more metadata:<br>git tag -a &lt;tag-name&gt;
Copy<br>For example, for an annotated tag you can add a tag message:<br>git tag -a &lt;tag-name&gt; -m &lt;tag-message&gt;
Copy<br>You can view the list of stored tags in a repository:<br>git tag
Copy<br>You can refine the list of tags with the -l option:<br>git tag -l &lt;pattern-to-match&gt;
Copy<br>You can push a tag to remote, which has to be done explicitly:<br>git push origin &lt;tag-name&gt;
Copy<br>You can also <a data-tooltip-position="top" aria-label="git checkout" data-href="git checkout" href="\software-development\version-control\using-branches\git-checkout.html" class="internal-link" target="_self" rel="noopener">checkout</a> a tag:<br>git checkout &lt;tag-name&gt;
Copy<br>You can delete tags:<br>git tag -d &lt;tag-name&gt;
Copy]]></description><link>software-development\version-control\inspecting-a-repository\git-tag.html</link><guid isPermaLink="false">Software Development/Version Control/Inspecting a Repository/git tag.md</guid><pubDate>Fri, 16 Aug 2024 01:29:14 GMT</pubDate></item><item><title><![CDATA[Pull Requests]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\making-a-pull-request\pull-requests.html</link><guid isPermaLink="false">Software Development/Version Control/Making a Pull Request/Pull Requests.md</guid><pubDate>Thu, 15 Aug 2024 19:43:51 GMT</pubDate></item><item><title><![CDATA[git rebase]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\rewriting-history\git-rebase.html</link><guid isPermaLink="false">Software Development/Version Control/Rewriting History/git rebase.md</guid><pubDate>Thu, 15 Aug 2024 19:27:39 GMT</pubDate></item><item><title><![CDATA[git reflog]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\rewriting-history\git-reflog.html</link><guid isPermaLink="false">Software Development/Version Control/Rewriting History/git reflog.md</guid><pubDate>Thu, 15 Aug 2024 19:27:41 GMT</pubDate></item><item><title><![CDATA[git add]]></title><description><![CDATA[ 
 <br>The git add command adds a change in the working directory to the <a data-tooltip-position="top" aria-label="Staging Area" data-href="#Staging Area" href="\#Staging_Area" class="internal-link" target="_self" rel="noopener">staging area</a>. It tells <a data-href="Git" href="\software-development\version-control\git.html" class="internal-link" target="_self" rel="noopener">Git</a> that you want to include updates to a particular file in the next commit. However, this command does not really affect the repository in any significant way - changes are not actually recorded until you run <a data-href="git commit" href="\software-development\version-control\saving-changes\git-commit.html" class="internal-link" target="_self" rel="noopener">git commit</a>.<br><br>The git add and git commit commands compose the fundamental Git workflow - They are the means to record versions of a project into the repository's history.<br>Developing a project revolves around the basic edit/stage/commit pattern:<br>
<br>First, you edit your files in the working directory.
<br>When you are ready to save a copy of the current state of the project, you stage changes with git add.
<br>After you're happy with the staged snapshot, you commit it to the project history with git commit.<br>
Additionally, if you need to undo a commit or staged snapshot, you can use <a data-href="git reset" href="\software-development\version-control\undoing-changes\git-reset.html" class="internal-link" target="_self" rel="noopener">git reset</a>.
<br><br>The primary function of the command is to promote pending changes in the working directory to the staging area. The staging area is one of Git's unique feature. Instead of committing all of the changes you've made since the last commit, the stage lets you group related changes into highly focused snapshots before actually committing it tot he project history. As in any revision control system, it's important to create atomic commits so that it's easy to track down bugs and revert changes with minimal impact on the entire project.\<br><br>The generic command is:<br>git add &lt;filename&gt;
Copy<br>You can stage all changes recursively for all files in a specific directory:<br>git add &lt;directory&gt;
Copy<br>You can stage all changes, for all:<br>git add -A
Copy]]></description><link>software-development\version-control\saving-changes\git-add.html</link><guid isPermaLink="false">Software Development/Version Control/Saving Changes/git add.md</guid><pubDate>Thu, 15 Aug 2024 20:43:27 GMT</pubDate></item><item><title><![CDATA[git commit]]></title><description><![CDATA[ 
 <br>The git commit command captures a snapshot of the project's currently staged changes. Committed snapshots are regarded as a "safe" version of a project - <a data-href="Git" href="\software-development\version-control\git.html" class="internal-link" target="_self" rel="noopener">Git</a> will never change them unless the developer explicitly asks it to.<br><br>At a high-level, Git can be thought of as a timeline management utility. Commits, in this analogy, would be the core building block units of a Git project timeline - a milestone or a snapshot of the current project. You can decide what changes to store within each commit by using the <a data-href="git add" href="\software-development\version-control\saving-changes\git-add.html" class="internal-link" target="_self" rel="noopener">git add</a> command. Commits are created with the git commit command to capture the state of a project at that point in time. All the accumulated commits are first stored locally until the developer <a data-tooltip-position="top" aria-label="git push" data-href="git push" href="\software-development\version-control\syncing\git-push.html" class="internal-link" target="_self" rel="noopener">pushes</a> the commits to the central repository.<br>Because storing the history of every directories of a project would be massively difficult and unscalable, Git's version control model works based on these snapshots. Unlike other tools like <a data-href="SVN" href="\SVN" class="internal-link" target="_self" rel="noopener">SVN</a> which stores the differences of each version, or the diffs, which is useful for building a project to the current timeline from scratch, snapshots are much, much faster.<br>
Snapshot to a repository is like a screenshot to a video.
<br>Although these snapshots are not human-readable, developers can choose to add a commit message which can be a useful tool to remind what this snapshot was about upon committing.<br><br>Most commonly, you can create a current snapshot of your repository simply with:<br>git commit
Copy<br>To commit a snapshot of all changes in the working directory:<br>git commit -a
Copy<br>You can add the commit message with the -m flag:<br>git commit -m "&lt;commit-mesage&gt;"
Copy<br>You can add the current changes to the last commit by adding the --amend flag:<br>git commit --amend
Copy]]></description><link>software-development\version-control\saving-changes\git-commit.html</link><guid isPermaLink="false">Software Development/Version Control/Saving Changes/git commit.md</guid><pubDate>Fri, 16 Aug 2024 00:35:44 GMT</pubDate></item><item><title><![CDATA[git diff]]></title><description><![CDATA[ 
 <br>The term "diff" is simply a shortened word of "difference". In the context of <a data-href="Git" href="\software-development\version-control\git.html" class="internal-link" target="_self" rel="noopener">Git</a>, it is a function that takes two input data sets and outputs the changes between them. git diff is a multi-use Git command that when executed runs a diff function on Git data sources. These can be commits, branches, files, and more.]]></description><link>software-development\version-control\saving-changes\git-diff.html</link><guid isPermaLink="false">Software Development/Version Control/Saving Changes/git diff.md</guid><pubDate>Fri, 16 Aug 2024 00:40:01 GMT</pubDate></item><item><title><![CDATA[git stash]]></title><description><![CDATA[ 
 <br>git stash temporarily stashes <a data-href="Git" href="\software-development\version-control\git.html" class="internal-link" target="_self" rel="noopener">Git</a> changes you've made to your working copy so you can work on something else, and then come back and re-apply them later on. It can be handy if you need to quickly switch context and work on something else, but you're midway through a code change and aren't quite ready to commit.<br><br>Stashes are encoded in your repository as some sort of a special commit object. These are stored in the .git/refs/stash file, which points to your most recently created stash.  <br><br>The git stash command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy. <br>You can reapply previously stashed changes with git stash pop.<br>However, git stash will not stash these by default:<br>
<br>New files in your working copy that have not yet been staged, and
<br>Files that have been <a data-tooltip-position="top" aria-label="gitignore" data-href="gitignore" href="\software-development\version-control\saving-changes\gitignore.html" class="internal-link" target="_self" rel="noopener">ignored</a>.
<br>The stash follows a first-in, last-out (a "stack") form. <br><br>Basic stash for your staged and unstaged files:<br>git stash
Copy<br>Re-applying your last stashed changes:<br>git stash pop
Copy<br>Stashing untracked files as an override:<br>git stash -u
Copy<br>Stashing ignored files (and the untracked files) as an override:<br>git stash -a
Copy<br>Stashing with a message for annotation:<br>git stash save "&lt;message&gt;"
Copy<br>Listing all stashed changes:<br>git stash list
Copy<br>Seeing the diff summary for the stash:<br>git stash show -p
Copy<br>Branching from the stash:<br>git stash branch &lt;branch-name&gt; stash@{&lt;stash-index&gt;}
Copy<br>Dropping a stash:<br>git stash drop stash@{stash-index}
Copy<br>Dropping all stashes:<br>git stash clear
Copy]]></description><link>software-development\version-control\saving-changes\git-stash.html</link><guid isPermaLink="false">Software Development/Version Control/Saving Changes/git stash.md</guid><pubDate>Fri, 16 Aug 2024 00:51:13 GMT</pubDate></item><item><title><![CDATA[git status]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\saving-changes\git-status.html</link><guid isPermaLink="false">Software Development/Version Control/Saving Changes/git status.md</guid><pubDate>Fri, 16 Aug 2024 00:36:13 GMT</pubDate></item><item><title><![CDATA[gitignore]]></title><description><![CDATA[ 
 <br><a data-href="Git" href="\software-development\version-control\git.html" class="internal-link" target="_self" rel="noopener">Git</a> sees every file in your working copy as one of three things:<br>
<br>Tracked - a file which has been previously staged or committed;
<br>Untracked - a file which has not been staged; or
<br>Ignored - a file which Git has been explicitly told to ignore.
<br>The .gitignore file is a standard file that can be created at the root of the repository to tell Git to set files or directories in the ignored state. Usually, the ignored files are:<br>
<br>Dependency caches, like /node_modules or /packages,
<br>Compiled code, such as .o, .pyc, and .class files,
<br>Build output directories, such as /bin and /out,
<br>Files generated at runtime, such as .log and .tmp,
<br>Hidden system files, such as .DS_Store, or
<br>Personal IDE config files, like .idea.
<br><br>You can use pattern matching to match against file names:<br>]]></description><link>software-development\version-control\saving-changes\gitignore.html</link><guid isPermaLink="false">Software Development/Version Control/Saving Changes/gitignore.md</guid><pubDate>Fri, 16 Aug 2024 01:19:50 GMT</pubDate></item><item><title><![CDATA[git clone]]></title><description><![CDATA[ 
 <br>git clone is a <a data-href="Git" href="\software-development\version-control\git.html" class="internal-link" target="_self" rel="noopener">Git</a> command which is used to target an existing repository and create a clone, or a copy of the target repository. If a project has already ben set up in a central repository, the git clone command is the most common way for users to obtain a development copy.<br>Like <a data-href="git init" href="\software-development\version-control\setting-up-repository\git-init.html" class="internal-link" target="_self" rel="noopener">git init</a>, cloning is generally a cone-time operation. Once a developer has obtained a working copy, all version control operations and collaborations are managed through their local repository.<br><br>The git clone command copies an existing Git repository by first running git init on the target subdirectory, then copies all of the current files into the initialized directory. As a convenience, cloning automatically creates a remote connection called origin, which points back to the original repository, making it very easy to interact with a central repository.<br><br>You can clone a repository directly from the web using different <a data-href="Network Protocols" href="\networks\network-protocols.html" class="internal-link" target="_self" rel="noopener">Network Protocols</a> like HTTPS and SSH. In either case, the command will be very akin to the following:<br>git clone &lt;repository&gt;
Copy<br>You can clone the above to a specific folder:<br>git clone &lt;repository&gt; &lt;directory&gt;
Copy<br>You can close a specific reference point of the repository:<br>git clone --branch &lt;tag&gt; &lt;repo&gt;
Copy<br>You can also create a shallow clone of your repository, which only clones the history of commits specified by the option depth. For example, depth=1 will only clone the latest commit:<br>git clone -depth=1 &lt;repo&gt;
Copy<br>You can clone a specific branch of the repository instead of the branch the remote HEAD is pointing to (usually the main branch):<br>git clone --branch
Copy<br>You can also create a bare clone of the repository, which doesn't have a working directory (you cannot edit anything, but only pull and push):<br>git clone --bare
Copy]]></description><link>software-development\version-control\setting-up-repository\git-clone.html</link><guid isPermaLink="false">Software Development/Version Control/Setting Up Repository/git clone.md</guid><pubDate>Fri, 16 Aug 2024 00:03:26 GMT</pubDate></item><item><title><![CDATA[git config]]></title><description><![CDATA[ 
 <br>The git config command is a convenience function that is used to set <a data-href="Git" href="\software-development\version-control\git.html" class="internal-link" target="_self" rel="noopener">Git</a> configuration values on a global or local project level. These configuration levels correspond to the .gitconfig text files. Executing git config will modify a configuration text file.<br><br>A Git configuration file has different levels:<br>
<br>--local

<br>Default value
<br>Operates on the context repository the git config command gets invoked in.
<br>Stored in .git/config file of the local repository.


<br>--global

<br>Applied to the operating system user.
<br>Stored in a file that is located in the user's home directory.


<br>--system

<br>Applied across an entire machine.
<br>Stored in a gitconfig file at the system's root path.


<br><br>Writing a command to set the key and value of the config file is straightforward:<br>git config &lt;configuration level&gt; &lt;key&gt; &lt;value&gt;
Copy]]></description><link>software-development\version-control\setting-up-repository\git-config.html</link><guid isPermaLink="false">Software Development/Version Control/Setting Up Repository/git config.md</guid><pubDate>Fri, 16 Aug 2024 00:08:51 GMT</pubDate></item><item><title><![CDATA[git init]]></title><description><![CDATA[ 
 <br>The git init command creates a new <a data-href="Git" href="\software-development\version-control\git.html" class="internal-link" target="_self" rel="noopener">Git</a> repository. It can be used to convert an existing, un-versioned project to a Git repository, or initialize a new and empty repository.<br><br>Executing git init creates a .git subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. This metadata includes subdirectories for objects, refs, and template files. A HEAD file is also created which points to the currently checked out commit.<br>By default, git init will initialize the Git configuration to the .git subdirectory.<br><br>At a high level, both git init and <a data-href="git clone" href="\software-development\version-control\setting-up-repository\git-clone.html" class="internal-link" target="_self" rel="noopener">git clone</a> is used to create a copy of an existing repository. However, git clone is dependent on git init - git clone is used to create a copy of an existing repository which first uses git init to create a new repository, then copies data from the existing repository to it.<br><br>All you have to do is cd into the project subdirectory and run git init to have a fully functional Git repository.<br>This command transforms the current directory into a Git repository:<br>git init
Copy<br>You can also create an empty Git repository in a specified directory like so:<br>git init &lt;directory&gt;
Copy<br><br>You can initialize an empty Git repository, but omit the working directory. Shared repositories should always be created with the --bare flag. This flag creates a repository that doesn't have a working directory, making it impossible to edit files and commit changes in that repository.<br>
Think of --bare as a way to mark a repository as a storage facility, as opposed to a development environment. This means that for virtually all Git workflow, the central repository is bare, and developers' local repositories are non-bare.
<br>git init --bare &lt;directory&gt;
Copy<br><br>Templates allow you to initialize a new repository with a predefined .git subdirectory. You can configure a template to have default directories and files that will get copied to a new repository's .git subdirectory.<br>git init &lt;directory&gt; --template=&lt;template_directory&gt;
Copy]]></description><link>software-development\version-control\setting-up-repository\git-init.html</link><guid isPermaLink="false">Software Development/Version Control/Setting Up Repository/git init.md</guid><pubDate>Thu, 15 Aug 2024 20:57:05 GMT</pubDate></item><item><title><![CDATA[Setting Alias for Git Commands]]></title><description><![CDATA[ 
 <br>It is possible to give an alias for <a data-href="Git" href="\software-development\version-control\git.html" class="internal-link" target="_self" rel="noopener">Git</a> commands. For example, git checkout could be aliased to git co. There is no direct git alias command, but done through using the <a data-href="git config" href="\software-development\version-control\setting-up-repository\git-config.html" class="internal-link" target="_self" rel="noopener">git config</a> command.<br><br>Using the git config command:<br>git config &lt;configuration level&gt; alias.&lt;alias&gt; &lt;command&gt;

#EXAMPLE
git config --global alias.co checkout
Copy]]></description><link>software-development\version-control\setting-up-repository\setting-alias-for-git-commands.html</link><guid isPermaLink="false">Software Development/Version Control/Setting Up Repository/Setting Alias for Git Commands.md</guid><pubDate>Fri, 16 Aug 2024 00:12:40 GMT</pubDate></item><item><title><![CDATA[git fetch]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\syncing\git-fetch.html</link><guid isPermaLink="false">Software Development/Version Control/Syncing/git fetch.md</guid><pubDate>Thu, 15 Aug 2024 19:27:24 GMT</pubDate></item><item><title><![CDATA[git pull]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\syncing\git-pull.html</link><guid isPermaLink="false">Software Development/Version Control/Syncing/git pull.md</guid><pubDate>Thu, 15 Aug 2024 19:27:34 GMT</pubDate></item><item><title><![CDATA[git push]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\syncing\git-push.html</link><guid isPermaLink="false">Software Development/Version Control/Syncing/git push.md</guid><pubDate>Thu, 15 Aug 2024 19:27:37 GMT</pubDate></item><item><title><![CDATA[git remote]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\syncing\git-remote.html</link><guid isPermaLink="false">Software Development/Version Control/Syncing/git remote.md</guid><pubDate>Thu, 15 Aug 2024 19:27:44 GMT</pubDate></item><item><title><![CDATA[git clean]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\undoing-changes\git-clean.html</link><guid isPermaLink="false">Software Development/Version Control/Undoing Changes/git clean.md</guid><pubDate>Thu, 15 Aug 2024 19:27:12 GMT</pubDate></item><item><title><![CDATA[git reset]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\undoing-changes\git-reset.html</link><guid isPermaLink="false">Software Development/Version Control/Undoing Changes/git reset.md</guid><pubDate>Thu, 15 Aug 2024 19:27:47 GMT</pubDate></item><item><title><![CDATA[git revert]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\undoing-changes\git-revert.html</link><guid isPermaLink="false">Software Development/Version Control/Undoing Changes/git revert.md</guid><pubDate>Thu, 15 Aug 2024 19:27:49 GMT</pubDate></item><item><title><![CDATA[git rm]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\undoing-changes\git-rm.html</link><guid isPermaLink="false">Software Development/Version Control/Undoing Changes/git rm.md</guid><pubDate>Thu, 15 Aug 2024 19:35:34 GMT</pubDate></item><item><title><![CDATA[git branch]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\using-branches\git-branch.html</link><guid isPermaLink="false">Software Development/Version Control/Using Branches/git branch.md</guid><pubDate>Thu, 15 Aug 2024 19:27:07 GMT</pubDate></item><item><title><![CDATA[git checkout]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\using-branches\git-checkout.html</link><guid isPermaLink="false">Software Development/Version Control/Using Branches/git checkout.md</guid><pubDate>Thu, 15 Aug 2024 19:27:10 GMT</pubDate></item><item><title><![CDATA[git merge]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\using-branches\git-merge.html</link><guid isPermaLink="false">Software Development/Version Control/Using Branches/git merge.md</guid><pubDate>Thu, 15 Aug 2024 19:27:31 GMT</pubDate></item><item><title><![CDATA[Merge Conflicts]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\using-branches\merge-conflicts.html</link><guid isPermaLink="false">Software Development/Version Control/Using Branches/Merge Conflicts.md</guid><pubDate>Thu, 15 Aug 2024 19:36:31 GMT</pubDate></item><item><title><![CDATA[Merge Strategies]]></title><description><![CDATA[ 
 ]]></description><link>software-development\version-control\using-branches\merge-strategies.html</link><guid isPermaLink="false">Software Development/Version Control/Using Branches/Merge Strategies.md</guid><pubDate>Thu, 15 Aug 2024 19:36:38 GMT</pubDate></item><item><title><![CDATA[Git]]></title><description><![CDATA[ 
 <br>This entire note will be very inspired by <a data-tooltip-position="top" aria-label="https://www.atlassian.com/git/tutorials/what-is-version-control" rel="noopener" class="external-link" href="https://www.atlassian.com/git/tutorials/what-is-version-control" target="_blank">Atlassian's Git Tutorial</a> and also <a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=9eBieLWZQOM" rel="noopener" class="external-link" href="https://www.youtube.com/watch?v=9eBieLWZQOM" target="_blank">Practical Guide to Git from JetBrains Academy (youtube.com)</a>. <br>Git is a version control system, which is the tool of tracking and managing changes to the software code. <br><br>]]></description><link>software-development\version-control\git.html</link><guid isPermaLink="false">Software Development/Version Control/Git.md</guid><pubDate>Fri, 16 Aug 2024 01:06:02 GMT</pubDate></item><item><title><![CDATA[Caffè Mocha]]></title><description><![CDATA[ 
 <br>Caffè mocha is a chocolate-flavoured warm beverage and a variation of <a data-href="Caffè Latte" href="\hobbies\coffee\caffè-latte.html" class="internal-link" target="_self" rel="noopener">Caffè Latte</a>, but usually served in a glass rather than a mug. A common alias is mocha, mochaccino, or mochachino.<br><br>The name mocha comes from the Yemeni port of Mokha, which was a port well-known for its coffee trade from the 15th to 17th century. When the coffee culture expanded to Europe, the people referred to the coffee imports from Arabia as Mocha.<br>The coffee we drink today is made by adding chocolate, and that may have been because of the chocolate flavour that could be found in Yemeni coffee beans.<br><br>Creating a caffè mocha is simple:<br>
<br>Brew espresso
<br>Make hot chocolate
<br>Mix the two together.
<br>Mochaccino is a variation of caffè mocha, with a more latte-like recipe:<br>
<br>Brew espresso
<br>Steam milk (about 4 seconds of stretching)
<br>Drizzle some chocolate syrup and mix it with the espresso
<br>Add the steamed milk in
<br>Decorate with cocoa powder or more chocolate syrup.
]]></description><link>hobbies\coffee\caffè-mocha.html</link><guid isPermaLink="false">Hobbies/Coffee/Caffè Mocha.md</guid><pubDate>Thu, 15 Aug 2024 00:45:24 GMT</pubDate></item><item><title><![CDATA[Dagger]]></title><description><![CDATA[ 
 <br>Dagger is a tool for dependency injection for Java. It is currently being maintained by Google, and used across tons and tons of codebases. <br>
Dagger allows us to generate code that mimics the code that a user might have hand-written to ensure that dependency inject is as simple, traceable, and performant as it can be. <a data-tooltip-position="top" aria-label="https://dagger.dev/dev-guide/" rel="noopener" class="external-link" href="https://dagger.dev/dev-guide/" target="_blank">Dagger</a>
<br>Its main building block is Java's javax.inject.Inject <a data-tooltip-position="top" aria-label="Java Annotations" data-href="Java Annotations" href="\software-development\code-integrity\java-annotations.html" class="internal-link" target="_self" rel="noopener">annotation</a>.<br><br>Dagger constructs instances of your application classes and satisfies their dependencies. You can use Java's @Inject to annotate the constructor that Dagger should use to create instances of a class. When a new instance is requested, Dagger will obtain the required parameters values and invoke its constructor:<br>class Thermosiphon implements Pump {
	private final Heater heater;

	@Inject
	Thermosiphon(Heater heater) {
		this.heater = heater;
	}
	...
}
Copy<br>Dagger can also inject fields directly. In this example, it obtains a Heater instance for the heater field and a Pump instance for the pump field:<br>class CoffeeMaker {
	@Inject Heater heater;
	@Inject Pump pump;
	...
}
Copy<br>When @Inject is not feasible (e.g. Interfaces, third-party classes, ...), you can use @Provides annotation to satisfy a dependency. The method's return type defines which dependency it satisfies. For example, the provideHeater() is invoked whenever a Heater is required:<br>@Provides static Heater provideHeater() {
	return new ElectricHeater();
}
Copy<br>If the @Provides method has a dependency, it's still possible to use the annotation as long as the dependency has an @Inject constructor.<br>Additionally, all @Providesmust belong to a module, which can be added with the @Module annotation in the class like so:<br>@Module
interface HeaterModule {
	@Provides static Heater provideHeater() {
		return new ElectricHeater();
	}
}
Copy<br><br>The @Inject and @Provides annotated classes form a graph of objects, linked by their dependencies. Calling code like an application's main method accesses that graph via a well-defined set of roots. In Dagger, that set is defined by an interface with methods that have no arguments and return the desired type. By applying the @Component annotation to such an interface and passing the module types to the modules parameter, Dagger then fully generate an implementation of that contract.<br>@Component(modules = DripCoffeeModule.class)
interface CoffeeShop {
	CoffeeMaker maker();
}
Copy<br>The implementation has the same name as the interface prefixed with Dagger. For example, the CoffeeShop instance of the interface can be obtained by invoking the builder() method of the Dagger implementation:<br>CoffeeShop coffeeShop = DaggerCoffeeShop.builder()
	.dripCoffeeModule(new DripCoffeeModule())
	.build();
Copy<br>If all the dependencies can be constructed without the user creating a dependency instance, such as for a module with all static methods, Dagger will add a create() method that can be used to get a new instance without having to deal with the builder:<br>CoffeeShop coffeeShop = DaggerCoffeeShop.create();
Copy<br>After this, our CoffeeApp can simply use the Dagger-generated implementation of CoffeeShop to get a fully-injected CoffeeMaker:<br>public class CoffeeApp {
	public static void main(String[] args) {
		CoffeeShop coffeeShop = DaggerCoffeeShop.create();
		coffeeShop.maker().brew();
	}
}
Copy]]></description><link>software-development\code-integrity\dagger.html</link><guid isPermaLink="false">Software Development/Code Integrity/Dagger.md</guid><pubDate>Wed, 14 Aug 2024 21:32:46 GMT</pubDate></item><item><title><![CDATA[Java Annotations]]></title><description><![CDATA[ 
 ]]></description><link>software-development\code-integrity\java-annotations.html</link><guid isPermaLink="false">Software Development/Code Integrity/Java Annotations.md</guid><pubDate>Wed, 14 Aug 2024 16:30:31 GMT</pubDate></item><item><title><![CDATA[Dependency Injection]]></title><description><![CDATA[ 
 <br>
Dependency injection is a programming technique in which an object or function received other objects or function that it requires, as opposed to creating them internally. <a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Dependency_injection" rel="noopener" class="external-link" href="https://en.wikipedia.org/wiki/Dependency_injection" target="_blank">Dependency injection - Wikipedia</a>
<br>Dependency Injection is a <a data-tooltip-position="top" aria-label="Design Pattern" data-href="Design Pattern" href="\Design Pattern" class="internal-link" target="_self" rel="noopener">design pattern</a> to promote the separation of concerns, while ensuring that an object or function that wants to use a given service should not have to know how to construct those services. Instead, the receiving client, the object or function, is provided ith its dependencies by external code.<br>This is a key partner to the <a data-tooltip-position="top" aria-label="Object-Oriented Design" data-href="Object-Oriented Design" href="\Object-Oriented Design" class="internal-link" target="_self" rel="noopener">object-oriented design</a>, the Dependency Inversion Principle.<br>This makes testing much more effective, especially combined with <a data-tooltip-position="top" aria-label="Debugging > Eliminating dependencies in tests" data-href="Debugging#Eliminating dependencies in tests" href="\software-development\code-integrity\debugging.html#Eliminating_dependencies_in_tests" class="internal-link" target="_self" rel="noopener">mocking frameworks</a>.<br>There are multiple methods to enforce dependency injection, most popularly, <a data-href="Dagger" href="\software-development\code-integrity\dagger.html" class="internal-link" target="_self" rel="noopener">Dagger</a> for Java.]]></description><link>software-development\design-pattern\structural-patterns\dependency-injection.html</link><guid isPermaLink="false">Software Development/Design Pattern/Structural Patterns/Dependency Injection.md</guid><pubDate>Wed, 14 Aug 2024 21:08:47 GMT</pubDate></item><item><title><![CDATA[Serverless Application Model (SAM)]]></title><description><![CDATA[ 
 ]]></description><link>cloud-computing\aws\serverless-application-model-(sam).html</link><guid isPermaLink="false">Cloud Computing/AWS/Serverless Application Model (SAM).md</guid><pubDate>Tue, 13 Aug 2024 22:26:52 GMT</pubDate></item><item><title><![CDATA[Codecs]]></title><description><![CDATA[ 
 ]]></description><link>hobbies\audio\codecs.html</link><guid isPermaLink="false">Hobbies/Audio/Codecs.md</guid><pubDate>Wed, 14 Aug 2024 02:57:48 GMT</pubDate></item><item><title><![CDATA[Audio Feedback]]></title><description><![CDATA[ 
 ]]></description><link>hobbies\keyboards\audio-feedback.html</link><guid isPermaLink="false">Hobbies/Keyboards/Audio Feedback.md</guid><pubDate>Wed, 14 Aug 2024 03:02:01 GMT</pubDate></item><item><title><![CDATA[Switches]]></title><description><![CDATA[ 
 ]]></description><link>hobbies\keyboards\switches.html</link><guid isPermaLink="false">Hobbies/Keyboards/Switches.md</guid><pubDate>Wed, 14 Aug 2024 03:01:56 GMT</pubDate></item><item><title><![CDATA[Debugging]]></title><description><![CDATA[ 
 <br>Debugging is the act of figuring out the difference between the expected and reality of the current code and then patching it. A program is called stable if it doesn't have a lot of obvious bugs. On the contrary, it is called buggy or unstable if the code has a large number of bugs that affect the functionality and cause incorrect results.<br>There are an infinite amount of ways a bugs can come to existence, but most commonly sprouted from:<br>
<br>Communication issues in the team;
<br>Misunderstanding of the requirements;
<br>Software complexity;
<br>Programming errors;
<br>Use of unfamiliar technologies;
<br>An error in a third-party library.
<br><br>It's almost impossible to avoid all bugs in a large program, but it is possible to reduce their number. These are the five steps that can help you, as a developer, to help you avoid bugs:<br>
<br>Make sure you know what to do.
<br>Decompose a program into smaller units.
<br>Write easy-to-read code.
<br>Run the program with boundary input values.
<br>Write automated tests that will check the program at the build time.
<br>Test automations are possible with debugging frameworks, such as JUnit for Java and PyTest for Python.<br><br>There are several tools and guidelines on how to make an effective test. A simple test to simply compare the values of the reality and the expectation is called an assertion. <br>A good assertion should not include the implementation details in the tests. It should also test only one thing per test. However, following that rule may make testing pretty difficult because we are no longer sure if we can confidently expect the underlying implementation to behave correctly. This is when we can <a data-tooltip-position="top" aria-label="Eliminating dependencies in tests" data-href="#Eliminating dependencies in tests" href="\#Eliminating_dependencies_in_tests" class="internal-link" target="_self" rel="noopener">eliminate dependencies during testing</a> to try to make sure our scopes are targeting the exact function we wish to test.<br><br>Your functions may require dependencies, whether it be a different function that returns a value or an external API call, these functions are irrelevant of the function behaviour we want to test and can be an anomaly during testing. One solution we can do is to try to inject a pretend dependency which acts like the actual dependency, but we can control what values will be returned. There are two main methods of pretending, which are the <a data-href="#Stubs" href="\#Stubs" class="internal-link" target="_self" rel="noopener">Stubs</a> and the <a data-href="#Mocks" href="\#Mocks" class="internal-link" target="_self" rel="noopener">Mocks</a>.<br><br>
A way to provide dummy info instead of making the calling to the actual thing.
<br>Stubs allow you to create a dependency that will return a canned value for calls made during the test. These can be useful when the clients of the stubs expect the same set of responses, e.g. a third party service. Stubs should never fail a unit or integration test where a mock can. They should also not require any sort of framework to run, but usually are supported by mocking frameworks to quickly build a stub.<br><br>
A way to mimic the real function, usually much more simplistic than the actual version.
<br>Mocks are objects that entails expectations about a behaviour. For example, you might be interested if the function you're testing for is correctly calling an external function correctly, you'd be using a mock. If a mock receives an unexpected call, they will probably raise an exception! <br><br>
Anything that can record what's happening inside your function during testing.
<br>There are also a special injection called a spy. Anything that is injected which can log data can be described as a spy, which may be useful if you wanted to log the behaviours on top of mocking or stubbing them.]]></description><link>software-development\code-integrity\debugging.html</link><guid isPermaLink="false">Software Development/Code Integrity/Debugging.md</guid><pubDate>Wed, 14 Aug 2024 03:17:27 GMT</pubDate></item><item><title><![CDATA[Agile Methodology]]></title><description><![CDATA[ 
 <br>The Agile Methodology is a project management approach that involves breaking into smaller phases to emphasize continuous collaboration and incremental improvements.<br><br>Agile, as popular it is, comes in with different forms that are targeted for certain task cases. The two very popular framework are the <a data-href="Scrum" href="\software-development\devops\scrum.html" class="internal-link" target="_self" rel="noopener">Scrum</a> and <a data-href="Kanban" href="\software-development\devops\kanban.html" class="internal-link" target="_self" rel="noopener">Kanban</a> workflow. The main differences between the two can be best-described with a table:<br><br><br>Many teams are attracted to Agile for its flexibility and responsiveness to changes. It's often easier to think about a smaller design goal than a large one, and especially so in bigger projects. It also involves a lot of human-to-human process to discuss about goals and be adjusted to their needs as time flows.<br>
A good agile team will unite under a shared vision, then bring it to life the way they know is best. <a data-tooltip-position="top" aria-label="https://www.atlassian.com/agile" rel="noopener" class="external-link" href="https://www.atlassian.com/agile" target="_blank">What is Agile? | Atlassian</a>
]]></description><link>software-development\devops\agile-methodology.html</link><guid isPermaLink="false">Software Development/DevOps/Agile Methodology.md</guid><pubDate>Tue, 13 Aug 2024 15:08:33 GMT</pubDate></item><item><title><![CDATA[Kanban]]></title><description><![CDATA[ 
 <br>A Kanban, best known by their Kanban board, is an agile project management tool designed to help visualize work, limit work-in-progress, and maximize efficiency <a data-tooltip-position="top" aria-label="https://www.atlassian.com/agile/kanban/boards" rel="noopener" class="external-link" href="https://www.atlassian.com/agile/kanban/boards" target="_blank">What is a Kanban Board? | Atlassian</a>.<br>Where <a data-href="Scrum" href="\software-development\devops\scrum.html" class="internal-link" target="_self" rel="noopener">Scrum</a> is designed to have a defined start and stop dates, Kanban is designed to be continuous.]]></description><link>software-development\devops\kanban.html</link><guid isPermaLink="false">Software Development/DevOps/Kanban.md</guid><pubDate>Tue, 13 Aug 2024 15:52:52 GMT</pubDate></item><item><title><![CDATA[Scrum]]></title><description><![CDATA[ 
 <br>Scrum is an agile project management framework that helps teams structure and manage their work through a set of values, principles, and practices <a data-tooltip-position="top" aria-label="https://www.atlassian.com/agile/scrum" rel="noopener" class="external-link" href="https://www.atlassian.com/agile/scrum" target="_blank">What is scrum and how to get started (atlassian.com)</a>. <br><br><br>In the Scrum framework, there are several distinct roles that help with the management and upholding of the entire project. The common scrum roles are:<br>
<br>Product Owner (PO)
<br>Scrum Master (SM)\
<br>Development Team
<br>You might find the term "Manager" be familiar to the one of the Scrum Master or Product Owners.<br><br>A sprint can be described as a measurement of a work iteration cadence, usually involving a start-to-finish task the given timespan. A sprint is generally two-weeks long. This short nature encourages small, incremental changes and promote lots of communication between the workforce and the customers. <br><br>Sprint planning is a tool to set up the sprints. A good sprint planning will keep the goals of the customers and the scrum well-positioned and acknowledged.<br>Sprint planning should be constrained no more than two hours each week, or four hours biweekly. This timeboxing makes sure that no time is wasted and everyone comes in prepared, as sprint planning takes up every members' time.<br>Estimation is a huge part of the sprint planning process, because the team needs to define what can or cannot be done in the sprint. A tool that can help with estimation spurs from the concept of <a data-tooltip-position="top" aria-label="User Stories" data-href="User Stories" href="\software-development\devops\user-stories.html" class="internal-link" target="_self" rel="noopener">user stories</a>. Each story can be given a story point, which signifies the amount of work that needs to be put into the task. One common downfall of assigning each story point is overestimation, where an engineer thinks that a task can be done in less time than what it actually did costed. This can be generally avoided with a strategy to allocate story points with the entire team. Generally, this is done with a tool called <a data-tooltip-position="top" aria-label="Planning Poker" data-href="Planning Poker" href="\software-development\devops\planning-poker.html" class="internal-link" target="_self" rel="noopener">planning poker</a>.<br>After each user stories are assigned, each engineers take a moment to calculate their planning points distribution.<br>
At Amazon, there were two different buckets each points could belong to. The first one was capacity, where the effort points are multiplied by a certain offset value for rests and balance, commonly 0.8, and the remainder would be distributed to the buffer or burst, which is reserved for doing other things, such as meetings, mental breaks, and more.
<br><br>A formal scrum meeting is defined as a ceremony. The purpose of each ceremony is to communicate with the team to discuss about the current goals and also dabble on how to improve themselves as a team.<br>The four standard ceremonies are:<br>
<br><a data-href="#Sprint Planning" href="\#Sprint_Planning" class="internal-link" target="_self" rel="noopener">Sprint Planning</a>

<br>Ceremony at the beginning of a sprint designed to set up a particular sprint.
<br>1-2 hours.
<br>Attended by development team, SM, and PO.


<br>Daily Stand-up

<br>Ceremony in the middle of a sprint to inform everyone what's going on across the team. Usually, this involves talking about what each member have done last work day, what they will work on today, and if they are blocked by anything.
<br>15-30 minutes maximum.
<br>Attended by development team, SM, and PO.


<br>Sprint Review\

<br>Ceremony at the end of a sprint, where the scrum team meets to reveal what was accomplished during the sprint. This can be made in form of a demo, or just a simple verbal discussion.
<br>45-90 minutes.
<br>Attended by development team, SM, and PO.


<br>Sprint Retrospective

<br>Ceremony at the end of a sprint, usually with the sprint review, to talk about what was done well and what can be improved more.
<br>45-90 minutes.
<br>Attended by development team, SM, and PO.


]]></description><link>software-development\devops\scrum.html</link><guid isPermaLink="false">Software Development/DevOps/Scrum.md</guid><pubDate>Wed, 14 Aug 2024 03:14:41 GMT</pubDate></item><item><title><![CDATA[Software Development Life Cycle (SDLC)]]></title><description><![CDATA[ 
 <br><br>Software development life cycle, or SDLC, is "the cost-effective and time-efficient process that development teams use to design and build high-quality software" [What is SDLC? - Software Development Lifecycle Explained - AWS (amazon.com)](<a rel="noopener" class="external-link" href="https://aws.amazon.com/what-is/sdlc/#:~:text=The%20software%20development%20lifecycle%20(SDLC,expectations%20during%20production%20and%20beyond.)" target="_blank">https://aws.amazon.com/what-is/sdlc/#:~:text=The%20software%20development%20lifecycle%20(SDLC,expectations%20during%20production%20and%20beyond.)</a>. In short, it's a methodology that steps-out the phases of development to maximize transparency of work, thus enabling efficient estimation of tasks and systematic delivery of software.<br><br>There are six phases of an usual software development cycle:<br>
<br>Plan
<br>Design
<br>Implement
<br>Test
<br>Deploy
<br>Maintain
<br><br>The planning phase includes task related to analysis. For example, cost-benefit analysis, resource analysis, allocation, and so on. Your role, as a software developer, is to collect the requirements from your clients, discuss about those requirements, and finding the best method to implement that idea. Usually, these data will be stored inside of a specification document. <br>The end goal of this phase is to create a common goal between you, your team, and your customers.<br><br>The design phase includes tasks related to identification of solutions. This is done through analyzing the requirements set in the planning phase to create a feasible idea to iterate on. The tasks can include comparing technology choices, identifying development tools, checking if a premade module is available, and so on. <br>The end goal of this phase is to figure out how to best integrate available software, or create new ones if necessary, to reach the goal.<br><br>The implementation phase includes tasks related to engineering and coding the product. This is done through the analysis of the requirements set in the design phase.<br>The end goal of this phase is to iterate upon the design and creating a model to test the functionalities.<br><br>The testing phase includes creating automations to continuously test the implemented features. Usually this is done in parallel with the implementation phase, but sometimes, this can be done before the implementation phase, and the <a data-href="Test-Driven Design" href="\software-development\devops\test-driven-design.html" class="internal-link" target="_self" rel="noopener">Test-Driven Design</a> methodology actually encourages such design.<br>The end goal of this phase is to create a continuous feed of quality analysis to check if the implemented design is deliverable to the customers at a satisfactory level.<br><br>The deploy phase includes the tasks to move the latest build copy to the production environment. <br><br>The maintaining phase includes the tasks to address issues voiced by the customers, refactor the code for the betterment of maintaining, and identifying new ways to improve the software.<br><br>Here are some of the popular methodologies that upholds the nature of SDLC:<br>
<br><a data-href="Waterfall Methodology" href="\software-development\devops\waterfall-methodology.html" class="internal-link" target="_self" rel="noopener">Waterfall Methodology</a>

<br>Arranges all the phases sequentially so that each new phase depends on the outcome of the previous phase.
<br>Can be slow.
<br>Not as flexible.


<br><a data-href="Agile Methodology" href="\software-development\devops\agile-methodology.html" class="internal-link" target="_self" rel="noopener">Agile Methodology</a>

<br>Arranges the phases into several development cycles of little size (sprints), making small but incremental software changes in each cycle.
<br>Engage customers and stakeholders to obtain feedback throughout the project lifecycle.
<br>Very flexible.
<br>Speed depends on the customer feedback, but on average faster than Waterfall for big projects.


]]></description><link>software-development\devops\software-development-life-cycle-(sdlc).html</link><guid isPermaLink="false">Software Development/DevOps/Software Development Life Cycle (SDLC).md</guid><pubDate>Wed, 14 Aug 2024 03:15:50 GMT</pubDate></item><item><title><![CDATA[Test-Driven Design]]></title><description><![CDATA[ 
 ]]></description><link>software-development\devops\test-driven-design.html</link><guid isPermaLink="false">Software Development/DevOps/Test-Driven Design.md</guid><pubDate>Wed, 14 Aug 2024 03:16:26 GMT</pubDate></item><item><title><![CDATA[User Stories]]></title><description><![CDATA[ 
 ]]></description><link>software-development\devops\user-stories.html</link><guid isPermaLink="false">Software Development/DevOps/User Stories.md</guid><pubDate>Wed, 14 Aug 2024 03:16:35 GMT</pubDate></item><item><title><![CDATA[Waterfall Methodology]]></title><description><![CDATA[ 
 <br>Waterfall Methodology is a common project management workflow which has the characteristics of a waterfall, hence the nickname.<br>
Like a waterfall, each process phase cascades downward sequentially through the SDLC stages. <a data-tooltip-position="top" aria-label="https://www.atlassian.com/agile/project-management/waterfall-methodology" rel="noopener" class="external-link" href="https://www.atlassian.com/agile/project-management/waterfall-methodology" target="_blank">Waterfall Methodology for Project Management | Atlassian</a>
<br>Unlike other methods like <a data-href="Agile Methodology" href="\software-development\devops\agile-methodology.html" class="internal-link" target="_self" rel="noopener">Agile Methodology</a>, Waterfall does not allow the engineers to begin the next phase without fully completing the current phase - your team cannot move forward until they resolve the problems. This can lead to big technical debt later in maintenance.]]></description><link>software-development\devops\waterfall-methodology.html</link><guid isPermaLink="false">Software Development/DevOps/Waterfall Methodology.md</guid><pubDate>Tue, 13 Aug 2024 01:19:26 GMT</pubDate></item><item><title><![CDATA[Docker]]></title><description><![CDATA[ 
 <br><br>Docker is an operating system for containers. Similar to how a virtual machine virtualizes server ahrdware, containers virtualize the operating system of a server (<a data-tooltip-position="top" aria-label="https://aws.amazon.com/docker/#:~:text=Docker%20is%20an%20operating%20system,%2C%20start%2C%20or%20stop%20containers." rel="noopener" class="external-link" href="https://aws.amazon.com/docker/#:~:text=Docker%20is%20an%20operating%20system,%2C%20start%2C%20or%20stop%20containers." target="_blank">What is Docker? | AWS (amazon.com)</a>).<br><br>A container is the standard unit of software that packages up code and all of its dependencies so the application runs quickly and reliably from one computing environment to another (<a data-tooltip-position="top" aria-label="https://www.docker.com/resources/what-container/" rel="noopener" class="external-link" href="https://www.docker.com/resources/what-container/" target="_blank">What is a Container? | Docker</a>). It's designed to be lightweight and standalone, such that it can be easily transported into another environment safely. This makes containers almost like an engine for a portable program.<br>Because the containers virtualize the operating system, there are some key differences between itself and a virtual machine:<br>
<br>Containers

<br>Abstraction of the application layer that packages code and dependencies together.
<br>High iteration speed because it only contains high-level software.
<br>Has a robust ecosystem sharing containers.
<br>Potential security risk of infecting the shared host of the containers.


<br>Virtual Machine

<br>Provides complete emulation of low-level hardware devices like CPU.
<br>Provides full isolation security.
<br>Much more dynamic and can be interactively developed.
<br>More time consuming to build and regenerate.
<br>VMs take up a lot of storage space.


<br>The right answer for your tool will depend on the use case. If you are simply trying to launch a simple ecosystem of software-only projects, then containers might be the right option for you. If you have a specific hardware requirement for your projects, then likely you'll need a virtual machine. Of course, you could choose to employ both, but it is likely that you won't need to.<br><br>Docker is almost synonymous with the standard of container. Because of its popularity, we can decide to use the containers in many different application. The best way to get started with Docker is by installing Docker Desktop for casual purposes. <br>Some examples are:<br>
<br>Launching MySQL
<br>Creating a running instance of <a data-tooltip-position="top" aria-label="Serverless Application Model (SAM)" data-href="Serverless Application Model (SAM)" href="\cloud-computing\aws\serverless-application-model-(sam).html" class="internal-link" target="_self" rel="noopener">Serverless Application Model for AWS</a>.
]]></description><link>software-development\tools\docker.html</link><guid isPermaLink="false">Software Development/Tools/Docker.md</guid><pubDate>Tue, 13 Aug 2024 22:32:24 GMT</pubDate></item><item><title><![CDATA[Bibliotheque]]></title><description><![CDATA[ 
 <br><br>Website has been created via GitHub pages - <a data-tooltip-position="top" aria-label="https://ksdsk.github.io/Bibliotheque/" rel="noopener" class="external-link" href="https://ksdsk.github.io/Bibliotheque/" target="_blank">visit the website!</a><br><br>I've graduated school, and I miss learning.<br>Lately I've been feeling like there's too many knowledge that I don't know about that can't be made with by creating personal projects. For example, learning more about Software Development Life Cycle (SDLC), refactoring tricks, or for a more embedded technology like learning about software layers.<br>Crazy I would tell myself when I was 14 years old, but I really do miss learning and training myself to contain more tech knowledge in general - I want to continue learning more to improve myself. Some people look up on me, but really, I'm just a person who only spent four years in school, dabbling in some fun and motivated projects here and there. I can't let them down. I can't let me down either. I've always wanted to be the person to be reached out for when they need some sort of help. The "first-aid kit" type of senior.<br>Anyways, I'm making this repository as sort of a motivation, but also a log of what I've learned in my career from hereon - a tracker of each and every one of my learnings. This repository is designed to contain pages of my <a data-tooltip-position="top" aria-label="https://obsidian.md/" rel="noopener" class="external-link" href="https://obsidian.md/" target="_blank">Obsidian</a> notes to contain all the cool things I came across after graduation. It'd be awesome if random strangers come by and look at my notes and go "wow this is pretty cool", just like how I read through random people's Medium pages for information and go "wow this is pretty cool".<br>I'm going to start from the very basics, then end up noting about the things I want to be better at, which is mostly going to relate to the kind of work I'm doing. Eventually, this repository is going to become something like a library, where it'll be a collection of notes for different kinds of subjects. The term library has a different meaning in software engineering though, so I'll just call it library in a different language. The Korean word for library doesn't sound cool (do-seo-kwan)... I think I'm going to call it Bibliothèque, the French word for Library.<br>And just for fun, I'll also add in some hobbies outside of the technological world as well. Mostly to keep my sanity, but also for lengthening my interest and mastery in them.]]></description><link>index.html</link><guid isPermaLink="false">index.md</guid><pubDate>Wed, 14 Aug 2024 03:05:52 GMT</pubDate></item></channel></rss>